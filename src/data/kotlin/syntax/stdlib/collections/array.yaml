id: array
title: 数组
query: List, Array operations in Kotlin
comment: 区分 `Array` 和 `List` 的用法，详细介绍数组的常见操作。
description: |
  Kotlin 中的 `Array` 和 `List` 都用于存储有序元素，但它们有明显的区别。`Array` 是固定大小的，初始化后不能调整长度，且每个元素都可以被修改（mutable）。`List` 是接口，分为只读的 `listOf()` 和可变的 `mutableListOf()`。与数组不同，`List` 可以动态增加或减少元素。

  - **数组 (`Array`)**：用于存储固定大小的同一类型元素，可以通过索引访问和修改元素，但长度不可变。
  - **不可变列表 (`List`)**：使用 `listOf()` 创建的只读集合，不支持元素的增加、删除或修改。
  - **可变列表 (`MutableList`)**：使用 `mutableListOf()` 创建，可以自由增删改元素，类似于动态数组。

  具体操作包括数组的创建、读取、更新，列表的增删，数组和列表之间的互相转换等。
example:
  - title: "创建数组"
    content: |
      ```kotlin
      val cities = arrayOf("Beijing", "Shanghai", "Shenzhen")  // 创建数组
      println(cities[0])  // 输出：Beijing
      cities[0] = "Guangzhou"  // 修改元素
      println(cities[0])  // 输出：Guangzhou
      ```

  - title: "遍历数组"
    content: |
      ```kotlin
      val numbers = arrayOf(1, 2, 3, 4, 5)
      for (number in numbers) {
          println(number)  // 输出数组中的每个元素
      }
      ```

  - title: "数组和列表的转换"
    content: |
      ```kotlin
      val array = arrayOf(1, 2, 3)
      val list = array.toList()  // 转换为 List
      val newArray = list.toTypedArray()  // 转换回 Array
      ```

  - title: "创建不可变列表"
    content: |
      ```kotlin
      val fruits = listOf("Apple", "Banana", "Orange")  // 不可变列表
      println(fruits[1])  // 输出：Banana
      ```

  - title: "创建可变列表并修改元素"
    content: |
      ```kotlin
      val mutableFruits = mutableListOf("Apple", "Banana")
      mutableFruits.add("Orange")  // 添加元素
      println(mutableFruits)  // 输出：[Apple, Banana, Orange]
      mutableFruits.removeAt(0)  // 移除第一个元素
      println(mutableFruits)  // 输出：[Banana, Orange]
      ```

  - title: "数组的基本操作"
    content: |
      ```kotlin
      val numbers = arrayOf(10, 20, 30)
      println("Size of array: ${numbers.size}")  // 输出数组的大小
      println("First element: ${numbers.first()}")  // 输出第一个元素
      println("Last element: ${numbers.last()}")  // 输出最后一个元素
      ```
  - title: "映射集合中的每个元素"
    content: |
      ```kotlin
      val numbers = listOf(1, 2, 3, 4, 5)
      val squared = numbers.map { it * it }
      println(squared)  // 输出: [1, 4, 9, 16, 25]
      ```

  - title: "对集合中的每个元素执行操作"
    content: |
      ```kotlin
      val numbers = listOf(1, 2, 3, 4, 5)
      numbers.forEach { println(it * 2) }  // 每个元素乘以 2 后输出
      ```

  - title: "聚合集合元素"
    content: |
      ```kotlin
      val numbers = listOf(1, 2, 3, 4)
      val sum = numbers.reduce { acc, num -> acc + num }
      println(sum)  // 输出: 10
      ```

  - title: "检查集合中是否存在符合条件的元素"
    content: |
      ```kotlin
      val numbers = listOf(1, 2, 3, 4)
      val hasEven = numbers.any { it % 2 == 0 }
      println(hasEven)  // 输出: true
      ```

  - title: "检查集合中的所有元素是否符合条件"
    content: |
      ```kotlin
      val numbers = listOf(2, 4, 6, 8)
      val allEven = numbers.all { it % 2 == 0 }
      println(allEven)  // 输出: true
      ```

  - title: "对集合进行排序"
    content: |
      ```kotlin
      val numbers = mutableListOf(5, 3, 8, 1)
      numbers.sort()
      println(numbers)  // 输出: [1, 3, 5, 8]
      ```

  - title: "查找集合中第一个满足条件的元素"
    content: |
      ```kotlin
      val numbers = listOf(1, 2, 3, 4, 5)
      val firstEven = numbers.find { it % 2 == 0 }
      println(firstEven)  // 输出: 2
      ```
references:
  - title: "Kotlin Lists (listOf & mutableListOf) - jquery-az"
    url: https://www.jquery-az.com/kotlin-lists
  - title: List
    url: https://kotlinlang.org/docs/collections-overview.html#list
