id: async
title: Async & Await
query: TypeScript async await usage examples
comment: 介绍 TypeScript 中的 `async` 和 `await` 关键字的用法，以及如何用它们来处理异步编程。
description: |
  在 TypeScript 中，`async` 和 `await` 是基于 Promise 的异步编程语法，提供了更加直观的方式来处理异步操作。`async` 用于声明一个异步函数，该函数总是返回一个 Promise；`await` 则用于暂停执行，等待 Promise 的解决（resolve）或拒绝（reject）。这可以将异步代码写得更像同步代码，提高代码的可读性和可维护性。
example:
  - title: 基本的 async/await 用法
    content: |
      ```typescript
      // 模拟的异步函数
      async function fetchData(url: string): Promise<any> {
          const response = await fetch(url);
          const data = await response.json();
          return data;
      }

      // 使用 try/catch 处理错误
      async function getData() {
          try {
              const data = await fetchData('https://jsonplaceholder.typicode.com/posts');
              console.log(data);
          } catch (error) {
              console.error('Error fetching data:', error);
          }
      }

      getData();  // 调用异步函数
      ```

  - title: 顺序执行异步操作
    content: |
      ```typescript
      async function sequentialFetch() {
          const url1 = 'https://jsonplaceholder.typicode.com/users/1';
          const url2 = 'https://jsonplaceholder.typicode.com/users/2';

          const user1 = await fetchData(url1);
          console.log(user1);

          const user2 = await fetchData(url2);
          console.log(user2);
      }

      sequentialFetch();  // 用户1数据获取后再获取用户2数据
      ```

  - title: 使用 Promise.all 并行执行异步操作
    content: |
      ```typescript
      async function parallelFetch() {
          const urls = [
              'https://jsonplaceholder.typicode.com/users/1',
              'https://jsonplaceholder.typicode.com/users/2',
              'https://jsonplaceholder.typicode.com/users/3'
          ];

          const promises = urls.map(url => fetchData(url));
          const results = await Promise.all(promises);
          console.log(results);  // 打印所有用户的数据
      }

      parallelFetch();  // 并行获取多个用户数据
      ```

  - title: 使用 async/await 处理并行 API 请求
    content: |
      ```typescript
      async function fetchApiData(): Promise<void> {
          try {
              const [user, posts] = await Promise.all([
                  fetch('https://jsonplaceholder.typicode.com/users/1').then(res => res.json()),
                  fetch('https://jsonplaceholder.typicode.com/posts?userId=1').then(res => res.json())
              ]);
              console.log('User:', user);
              console.log('Posts:', posts);
          } catch (error) {
              console.error('Error fetching API data:', error);
          }
      }

      fetchApiData();  // 并行请求用户和帖子数据
      ```

  - title: 异步箭头函数
    content: |
      ```typescript
      const asyncFunction = async (): Promise<string> => {
          const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');
          const data = await response.json();
          return data.title;
      };

      asyncFunction().then(title => console.log(title));  // 调用异步箭头函数
      ```
references:
  - title: async function
    url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function
  - title: async/await
    url: https://zh.javascript.info/async-await
