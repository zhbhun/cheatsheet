id: selector
title: 选择器表达式
description: Objective-C 中的选择器（Selector）是用于在运行时引用方法名称的一种方式。它本质上是一个 C 字符串（`char*`），代表方法名。选择器表达式 `@selector()` 用于在编译时获取方法的 SEL 类型标识符。选择器主要用于动态方法调用、目标-动作（Target-Action）模式、通知机制等场景，允许程序在运行时决定调用哪个方法。
usage:
  - title: 创建选择器
    description: |
      使用 `@selector()` 语法来创建一个选择器。括号内是方法的名称，包括冒号（如果方法接受参数）。编译器会检查方法是否存在，如果不存在会给出警告或错误。选择器的类型是 `SEL`。

      **语法：**
      - `@selector(methodName)`: 用于无参数方法。
      - `@selector(methodName:)`: 用于带一个参数的方法。
      - `@selector(methodName:anotherParameter:)`: 用于带多个参数的方法。
    example: |
      ```objectivec
      #import <Foundation/Foundation.h>

      @interface MyClass : NSObject
      - (void)doSomething;
      - (void)doSomethingWithParameter:(NSString *)param;
      - (void)doSomethingWithParameter1:(NSString *)param1 parameter2:(NSNumber *)param2;
      @end

      @implementation MyClass
      - (void)doSomething { NSLog(@"Doing something!"); }
      - (void)doSomethingWithParameter:(NSString *)param { NSLog(@"Doing something with: %@", param); }
      - (void)doSomethingWithParameter1:(NSString *)param1 parameter2:(NSNumber *)param2 { NSLog(@"Params: %@, %@", param1, param2); }
      @end

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              // 创建无参数方法的选择器
              SEL simpleSelector = @selector(doSomething);
              // 创建带一个参数方法的选择器
              SEL singleParamSelector = @selector(doSomethingWithParameter:);
              // 创建带多个参数方法的选择器
              SEL multiParamSelector = @selector(doSomethingWithParameter1:parameter2:);

              // 打印选择器（通常是 C 字符串形式的方法名）
              NSLog(@"Simple Selector: %s", sel_getName(simpleSelector)); // 输出: Simple Selector: doSomething
              NSLog(@"Single Param Selector: %s", sel_getName(singleParamSelector)); // 输出: Single Param Selector: doSomethingWithParameter:
              NSLog(@"Multi Param Selector: %s", sel_getName(multiParamSelector)); // 输出: Multi Param Selector: doSomethingWithParameter1:parameter2:
          }
          return 0;
      }
      ```
  - title: 检查对象是否响应选择器
    description: |
      在调用选择器对应的方法之前，通常需要检查对象是否能响应该选择器，以避免运行时崩溃。这可以通过 `respondsToSelector:` 方法实现。
    example: |
      ```objectivec
      #import <Foundation/Foundation.h>
      #import "MyClass.h" // 假设 MyClass 定义在 MyClass.h/m 中

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              MyClass *myObject = [[MyClass alloc] init];
              SEL knownSelector = @selector(doSomething);
              SEL unknownSelector = @selector(nonExistentMethod); // 一个不存在的方法

              // 检查对象是否响应已知选择器
              if ([myObject respondsToSelector:knownSelector]) {
                  NSLog(@"myObject responds to doSomething"); // 这会打印
              } else {
                  NSLog(@"myObject does NOT respond to doSomething");
              }

              // 检查对象是否响应未知选择器
              if ([myObject respondsToSelector:unknownSelector]) {
                  NSLog(@"myObject responds to nonExistentMethod");
              } else {
                  NSLog(@"myObject does NOT respond to nonExistentMethod"); // 这会打印
              }
          }
          return 0;
      }
      ```
  - title: 使用选择器调用无参数方法
    description: |
      可以使用 `performSelector:` 方法来让一个对象执行选择器对应的方法。这是一种动态调用方式。
      **注意:** ARC（自动引用计数）下直接使用 `performSelector:` 系列方法可能会导致编译器警告，因为它无法确定方法签名和内存管理语义。
    example: |
      ```objectivec
      #import <Foundation/Foundation.h>
      #import "MyClass.h"

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              MyClass *myObject = [[MyClass alloc] init];
              SEL action = @selector(doSomething);

              // 检查对象是否响应
              if ([myObject respondsToSelector:action]) {
                  // 使用 performSelector 调用无参数方法
                  // ARC 可能会在此处发出警告 "PerformSelector may cause a leak because its selector is unknown"
                  #pragma clang diagnostic push
                  #pragma clang diagnostic ignored "-Warc-performSelector-leaks"
                  [myObject performSelector:action]; // 输出: Doing something!
                  #pragma clang diagnostic pop
              }
          }
          return 0;
      }
      ```
  - title: 使用选择器调用带一个参数的方法
    description: |
      使用 `performSelector:withObject:` 方法可以调用带有一个对象类型参数的方法。参数类型必须是对象（id 或其子类）。
    example: |
      ```objectivec
      #import <Foundation/Foundation.h>
      #import "MyClass.h"

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              MyClass *myObject = [[MyClass alloc] init];
              SEL action = @selector(doSomethingWithParameter:);
              NSString *message = @"Hello Selector!";

              // 检查对象是否响应
              if ([myObject respondsToSelector:action]) {
                  // 使用 performSelector:withObject: 调用带一个参数的方法
                  #pragma clang diagnostic push
                  #pragma clang diagnostic ignored "-Warc-performSelector-leaks"
                  [myObject performSelector:action withObject:message]; // 输出: Doing something with: Hello Selector!
                  #pragma clang diagnostic pop
              }
          }
          return 0;
      }
      ```
  - title: 使用选择器调用带两个参数的方法
    description: |
      使用 `performSelector:withObject:withObject:` 方法可以调用带有两个对象类型参数的方法。
    example: |
      ```objectivec
      #import <Foundation/Foundation.h>
      #import "MyClass.h"

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              MyClass *myObject = [[MyClass alloc] init];
              SEL action = @selector(doSomethingWithParameter1:parameter2:);
              NSString *param1 = @"First";
              NSNumber *param2 = @123;

              // 检查对象是否响应
              if ([myObject respondsToSelector:action]) {
                  // 使用 performSelector:withObject:withObject: 调用带两个参数的方法
                  #pragma clang diagnostic push
                  #pragma clang diagnostic ignored "-Warc-performSelector-leaks"
                  [myObject performSelector:action withObject:param1 withObject:param2]; // 输出: Params: First, 123
                  #pragma clang diagnostic pop
              }
          }
          return 0;
      }
      ```
  - title: 在 Target-Action 模式中使用选择器
    description: |
      选择器在 Target-Action 模式中广泛使用，例如为 `UIButton` 设置点击事件处理方法，或为 `NSTimer` 设置触发时调用的方法。目标（Target）是接收消息的对象，动作（Action）是需要执行的选择器。
    example: |
      ```objectivec
      #import <Foundation/Foundation.h>
      // 假设在 UIKit/AppKit 环境下

      // --- 示例：NSTimer ---
      @interface TimerController : NSObject
      @property (nonatomic, strong) NSTimer *timer;
      - (void)startTimer;
      - (void)timerFired:(NSTimer *)timer;
      @end

      @implementation TimerController
      - (void)startTimer {
          // 创建一个定时器，每秒调用一次 timerFired: 方法
          self.timer = [NSTimer scheduledTimerWithTimeInterval:1.0
                                                        target:self // 目标是当前对象
                                                      selector:@selector(timerFired:) // 动作是 timerFired: 选择器
                                                      userInfo:nil
                                                       repeats:YES];
          NSLog(@"Timer started.");
      }

      - (void)timerFired:(NSTimer *)timer {
          NSLog(@"Timer fired at %@", [NSDate date]);
          // 可以在这里停止定时器
          // [self.timer invalidate];
          // self.timer = nil;
      }

      - (void)dealloc {
          [self.timer invalidate]; // 清理定时器
      }
      @end

      // --- 示例：UIButton (概念代码，需要在 UI 环境运行) ---
      /*
      #import <UIKit/UIKit.h> // 或 AppKit

      @interface ViewController : UIViewController // 或 NSViewController
      @end

      @implementation ViewController
      - (void)viewDidLoad {
          [super viewDidLoad];

          UIButton *button = [UIButton buttonWithType:UIButtonTypeSystem]; // 创建按钮
          [button setTitle:@"Click Me" forState:UIControlStateNormal];
          button.frame = CGRectMake(100, 100, 100, 50);

          // 添加 Target-Action
          [button addTarget:self // 目标是 ViewController 实例
                     action:@selector(buttonClicked:) // 动作是 buttonClicked: 选择器
           forControlEvents:UIControlEventTouchUpInside]; // 触发事件

          [self.view addSubview:button];
      }

      - (void)buttonClicked:(UIButton *)sender {
          NSLog(@"Button was clicked!");
      }
      @end
      */

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              TimerController *controller = [[TimerController alloc] init];
              [controller startTimer]; // 启动定时器

              // 为了让定时器有机会触发，让主线程运行一段时间
              [[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:3.5]];

              NSLog(@"Exiting."); // 3秒后退出
          }
          return 0;
      }
      ```
  - title: 在通知中心中使用选择器
    description: |
      `NSNotificationCenter` 使用选择器来指定当特定通知发布时，哪个对象的哪个方法应该被调用。
    example: |
      ```objectivec
      #import <Foundation/Foundation.h>

      // 定义一个通知名称
      NSString * const MyCustomNotification = @"MyCustomNotificationName";

      @interface NotificationReceiver : NSObject
      - (void)handleNotification:(NSNotification *)notification;
      @end

      @implementation NotificationReceiver
      - (instancetype)init {
          self = [super init];
          if (self) {
              // 注册监听通知
              [[NSNotificationCenter defaultCenter] addObserver:self // 观察者是当前对象
                                                       selector:@selector(handleNotification:) // 收到通知时调用的方法
                                                           name:MyCustomNotification // 监听的通知名称
                                                         object:nil]; // 不指定发送者，接收所有来源的该通知
              NSLog(@"Notification receiver registered.");
          }
          return self;
      }

      // 通知处理方法
      - (void)handleNotification:(NSNotification *)notification {
          NSLog(@"Received notification: %@", notification.name);
          if (notification.userInfo) {
              NSLog(@"User Info: %@", notification.userInfo);
          }
      }

      - (void)dealloc {
          // 移除观察者，非常重要，避免崩溃
          [[NSNotificationCenter defaultCenter] removeObserver:self];
          NSLog(@"Notification receiver unregistered.");
      }
      @end

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              NotificationReceiver *receiver = [[NotificationReceiver alloc] init];

              // 模拟发送通知
              NSLog(@"Posting notification...");
              NSDictionary *userInfo = @{@"message": @"Hello from notification!"};
              [[NSNotificationCenter defaultCenter] postNotificationName:MyCustomNotification // 发送的通知名称
                                                                  object:nil // 发送者为 nil
                                                                userInfo:userInfo]; // 附带信息

              // 等待一小段时间确保通知被处理 (在实际应用中不需要这样)
              [NSThread sleepForTimeInterval:0.1];

              // receiver 对象在这里超出作用域，其 dealloc 会被调用，自动移除观察者
          } // receiver 在这里被释放
          return 0;
      }
      ```
