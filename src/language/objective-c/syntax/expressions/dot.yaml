id: dot
title: 点语法
description: Objective-C 的点语法 (Dot Syntax) 是一种简洁的语法糖，主要用于替代传统的 `getter` 和 `setter` 方法调用来访问或修改对象的属性（property）。它使得代码更易读，更接近其他现代编程语言的风格。当你使用 `@property` 声明一个属性时，编译器会自动（或根据你的指定）生成相应的存取方法（accessor methods）。点语法本质上就是调用这些方法。
usage:
  - title: 声明属性以启用点语法
    description: |
      要使用点语法访问对象的特性，首先需要使用 `@property` 关键字在类的接口（`.h` 文件）或类扩展（`.m` 文件）中声明属性。编译器会根据声明自动合成（synthesize）对应的 getter 和 setter 方法（除非属性被声明为 `readonly`，则只合成 getter）。

      - `@property`: 用于声明属性。
      - `(attributes)`: 可选的属性特性，如 `nonatomic`, `atomic`, `strong`, `weak`, `copy`, `readonly`, `readwrite`, `getter=`, `setter=` 等。
      - `Type`: 属性的数据类型。
      - `propertyName`: 属性的名称。
    example: |
      ```objectivec
      // MyClass.h
      #import <Foundation/Foundation.h>

      @interface MyClass : NSObject

      // 声明一个名为 myString 的 NSString 属性
      // nonatomic: 非原子性，适用于多线程性能优化（默认是 atomic）
      // strong: 强引用，适用于对象类型，表示拥有该对象（ARC 环境下默认）
      @property (nonatomic, strong) NSString *myString;

      // 声明一个名为 count 的 NSInteger 属性
      // assign: 简单赋值，适用于基本数据类型（如 int, float, BOOL）或非对象指针（默认）
      @property (nonatomic, assign) NSInteger count;

      // 声明一个只读属性
      @property (nonatomic, strong, readonly) NSDate *creationDate;

      @end

      // MyClass.m
      #import "MyClass.h"

      @interface MyClass()
      // 在类扩展中重新声明为 readwrite，以便在内部修改
      @property (nonatomic, strong, readwrite) NSDate *creationDate;
      @end

      @implementation MyClass

      - (instancetype)init {
          self = [super init];
          if (self) {
              // 在内部初始化只读属性
              _creationDate = [NSDate date]; // 可以直接访问底层实例变量 _creationDate
              // 或者 self.creationDate = [NSDate date]; // 如果重新声明为 readwrite
          }
          return self;
      }

      // 你也可以自定义 getter 或 setter，如果需要特殊逻辑
      // - (NSString *)myString {
      //     return _myString; // _myString 是编译器自动生成的实例变量
      // }
      //
      // - (void)setMyString:(NSString *)myString {
      //     _myString = [myString copy]; // 例如，自定义 setter 实现 copy 行为
      // }

      @end
      ```
  - title: 使用点语法访问属性值 (Getter)
    description: |
      使用点语法读取属性值时，实际上是调用了该属性的 getter 方法。语法为 `object.propertyName`。这比传统的 `[object propertyName]` 消息发送语法更简洁。
    example: |
      ```objectivec
      #import "MyClass.h"
      #import <Foundation/Foundation.h>

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              MyClass *myObject = [[MyClass alloc] init];
              myObject.myString = @"Hello"; // 先设置一个值 (见下一个用法)
              myObject.count = 10;

              // 使用点语法访问属性值
              NSString *currentString = myObject.myString; // 等效于 [myObject myString]
              NSInteger currentCount = myObject.count;   // 等效于 [myObject count]
              NSDate *date = myObject.creationDate; // 访问只读属性, 等效于 [myObject creationDate]

              // 输出获取到的值
              NSLog(@"String: %@", currentString); // 输出: String: Hello
              NSLog(@"Count: %ld", (long)currentCount); // 输出: Count: 10
              NSLog(@"Creation Date: %@", date); // 输出: Creation Date: <当前日期时间>
          }
          return 0;
      }
      ```
  - title: 使用点语法设置属性值 (Setter)
    description: |
      使用点语法给属性赋值时，实际上是调用了该属性的 setter 方法。语法为 `object.propertyName = value;`。这比传统的 `[object setPropertyName:value]` 消息发送语法更简洁。注意，不能对声明为 `readonly` 的属性使用点语法赋值（除非在类实现内部，且已通过类扩展重新声明为 `readwrite`）。
    example: |
      ```objectivec
      #import "MyClass.h"
      #import <Foundation/Foundation.h>

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              MyClass *myObject = [[MyClass alloc] init];

              // 使用点语法设置属性值
              myObject.myString = @"World"; // 等效于 [myObject setMyString:@"World"]
              myObject.count = 5;      // 等效于 [myObject setCount:5]

              // 尝试访问修改后的值
              NSLog(@"Updated String: %@", myObject.myString); // 输出: Updated String: World
              NSLog(@"Updated Count: %ld", (long)myObject.count);   // 输出: Updated Count: 5

              // 下面的代码会导致编译错误，因为 creationDate 是只读的
              // myObject.creationDate = [NSDate date]; // Error: Assigning to readonly property
          }
          return 0;
      }
      ```
  - title: 点语法与自定义 Getter/Setter 名称
    description: |
      可以在 `@property` 声明中使用 `getter=` 和 `setter=` 特性来指定自定义的存取方法名。点语法仍然有效，它会调用你指定名称的方法。这对于 `BOOL` 类型的属性（通常 getter 名称为 `isPropertyName`）或需要避免命名冲突时很有用。
    example: |
      ```objectivec
      // CustomAccessors.h
      #import <Foundation/Foundation.h>

      @interface CustomAccessors : NSObject

      // 使用自定义 getter 名称
      @property (nonatomic, assign, getter=isEnabled) BOOL enabled;

      // 使用自定义 setter 名称 (较少见)
      @property (nonatomic, strong, setter=updateTitle:) NSString *title;

      @end

      // CustomAccessors.m
      #import "CustomAccessors.h"

      @implementation CustomAccessors
      // 编译器仍会自动合成 _enabled 和 _title 实例变量
      // 以及 - (BOOL)isEnabled 方法和 - (void)updateTitle:(NSString *)title 方法
      @end

      // main.m
      #import "CustomAccessors.h"
      #import <Foundation/Foundation.h>

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              CustomAccessors *obj = [[CustomAccessors alloc] init];

              // 使用点语法设置值 (调用默认或自定义的 setter)
              obj.enabled = YES;        // 调用 [obj setEnabled:YES] (即使 getter 自定义了，setter 仍可能是默认名)
              obj.title = @"My Title"; // 调用 [obj updateTitle:@"My Title"]

              // 使用点语法访问值 (调用自定义的 getter)
              BOOL status = obj.enabled; // 调用 [obj isEnabled]
              NSString *currentTitle = obj.title; // 调用 [obj title] (默认 getter)

              NSLog(@"Status: %d", status);         // 输出: Status: 1
              NSLog(@"Title: %@", currentTitle);    // 输出: Title: My Title

              // 也可以直接调用自定义名称的方法
              [obj updateTitle:@"New Title"];
              NSLog(@"New Title Check: %@", [obj title]); // 输出: New Title Check: New Title
              NSLog(@"Enabled Check: %d", [obj isEnabled]); // 输出: Enabled Check: 1
          }
          return 0;
      }
      ```
  - title: 链式点语法访问
    description: |
      如果一个属性本身返回一个对象，你可以链式使用点语法来访问该返回对象的属性。例如 `object.property1.property2`。这等同于 `[[object property1] property2]`。
    example: |
      ```objectivec
      // Detail.h
      #import <Foundation/Foundation.h>
      @interface Detail : NSObject
      @property (nonatomic, strong) NSString *info;
      @end
      // Detail.m
      #import "Detail.h"
      @implementation Detail
      @end

      // Container.h
      #import <Foundation/Foundation.h>
      #import "Detail.h"
      @interface Container : NSObject
      @property (nonatomic, strong) Detail *detailObject;
      @end
      // Container.m
      #import "Container.h"
      @implementation Container
      - (instancetype)init {
          self = [super init];
          if (self) {
              _detailObject = [[Detail alloc] init]; // 初始化 detailObject
          }
          return self;
      }
      @end

      // main.m
      #import "Container.h"
      #import <Foundation/Foundation.h>

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              Container *container = [[Container alloc] init];

              // 设置内层对象的属性
              container.detailObject.info = @"Nested Information"; // 等效于 [[container detailObject] setInfo:@"Nested Information"]

              // 访问内层对象的属性
              NSString *nestedInfo = container.detailObject.info; // 等效于 [[container detailObject] info]

              NSLog(@"Nested Info: %@", nestedInfo); // 输出: Nested Info: Nested Information
          }
          return 0;
      }
      ```
  - title: 使用点语法访问类属性
    description: |
      Objective-C 支持类属性（使用 `+` 声明或使用 `@property (class)`）。可以使用类名加点语法来访问这些类属性，类似于访问实例属性。语法为 `ClassName.propertyName`。
    example: |
      ```objectivec
      // AppConfig.h
      #import <Foundation/Foundation.h>

      @interface AppConfig : NSObject

      // 声明一个类属性 (需要 Xcode 8+ / Swift 3+ 互操作性支持)
      @property (class, nonatomic, strong) NSString *apiBaseUrl;
      @property (class, nonatomic, assign, readonly) NSInteger maxRetries;

      @end

      // AppConfig.m
      #import "AppConfig.h"

      @implementation AppConfig

      // 为类属性提供存储 (通常是静态变量)
      static NSString *_apiBaseUrl = @"https://api.example.com";
      static const NSInteger _maxRetries = 3;

      // 实现类属性的存取方法
      + (NSString *)apiBaseUrl {
          return _apiBaseUrl;
      }

      + (void)setApiBaseUrl:(NSString *)url {
          if (url != _apiBaseUrl) {
              _apiBaseUrl = [url copy]; // 使用 copy 保证字符串不可变性
          }
      }

      + (NSInteger)maxRetries {
          return _maxRetries;
      }

      @end

      // main.m
      #import "AppConfig.h"
      #import <Foundation/Foundation.h>

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              // 使用点语法访问类属性
              NSString *baseUrl = AppConfig.apiBaseUrl; // 等效于 [AppConfig apiBaseUrl]
              NSInteger retries = AppConfig.maxRetries; // 等效于 [AppConfig maxRetries]

              NSLog(@"API Base URL: %@", baseUrl); // 输出: API Base URL: https://api.example.com
              NSLog(@"Max Retries: %ld", (long)retries); // 输出: Max Retries: 3

              // 使用点语法设置可写的类属性
              AppConfig.apiBaseUrl = @"https://api.newexample.com"; // 等效于 [AppConfig setApiBaseUrl:@"..."]

              NSLog(@"Updated API Base URL: %@", AppConfig.apiBaseUrl); // 输出: Updated API Base URL: https://api.newexample.com

              // 下面的代码会编译错误，因为 maxRetries 是只读的
              // AppConfig.maxRetries = 5; // Error: Assigning to readonly property
          }
          return 0;
      }
      ```
  - title: 点语法与方法调用的区别
    description: |
      点语法 **仅** 用于调用属性的存取方法（getter 和 setter）。对于其他任何方法（包括无参数的方法），**必须** 使用方括号 `[]` 的消息发送语法。混淆这两者是常见的错误。
    example: |
      ```objectivec
      // MyObject.h
      #import <Foundation/Foundation.h>
      @interface MyObject : NSObject
      @property (nonatomic, strong) NSString *name;
      - (void)performAction;
      - (NSString *)generateDescription;
      @end

      // MyObject.m
      #import "MyObject.h"
      @implementation MyObject
      - (void)performAction {
          NSLog(@"Action performed for object with name: %@", self.name ?: @"(no name)");
      }
      - (NSString *)generateDescription {
          return [NSString stringWithFormat:@"Object Name: %@", self.name ?: @"N/A"];
      }
      @end

      // main.m
      #import "MyObject.h"
      #import <Foundation/Foundation.h>

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              MyObject *obj = [[MyObject alloc] init];

              // 正确：使用点语法访问/设置属性
              obj.name = @"Test Object";
              NSLog(@"Name: %@", obj.name); // 输出: Name: Test Object

              // 正确：使用方括号调用方法
              [obj performAction]; // 输出: Action performed for object with name: Test Object
              NSString *desc = [obj generateDescription];
              NSLog(@"Description: %@", desc); // 输出: Description: Object Name: Test Object

              // 错误：不能用点语法调用非存取方法
              // obj.performAction; // 编译错误!
              // NSString *desc2 = obj.generateDescription; // 编译错误! (除非碰巧存在同名的属性)
          }
          return 0;
      }
      ```
