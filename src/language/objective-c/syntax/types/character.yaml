id: character
title: 字符
query: Objective-C 字符类型
description: Objective-C 继承了 C 语言的 `char` 类型来表示单个 8 位字符（通常是 ASCII）。对于更广泛的 Unicode 字符，Objective-C 使用 `unichar` 类型（本质上是 `unsigned short`，用于 UTF-16 编码）以及 `NSString` 对象来处理字符序列。字符类型用于表示文本的基本单位。
usage:
  - title: 创建 char 字符
    description: |
      `char` 是 C 语言的基础类型，在 Objective-C 中同样可用。它通常用于存储 ASCII 字符。

      **语法:**
      - 使用单引号 `' '` 将字符括起来进行赋值。
      - `char` 变量存储的是字符对应的整数值（ASCII 码）。
    example: |
      ```objectivec
      #import <Foundation/Foundation.h>

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              // 声明并初始化一个 char 变量
              char grade = 'A'; // 将字符 'A' 赋值给 grade
              char exclamationMark = '!'; // 将字符 '!' 赋值给 exclamationMark

              // 打印 char 变量的值，使用 %c 格式说明符
              NSLog(@"Grade: %c", grade); // 输出: Grade: A
              NSLog(@"Symbol: %c", exclamationMark); // 输出: Symbol: !

              // char 实际上存储的是整数 ASCII 值
              NSLog(@"ASCII value of Grade: %d", grade); // 输出: ASCII value of Grade: 65
          }
          return 0;
      }
      ```
  - title: 创建 unichar 字符
    description: |
      `unichar` 是 Objective-C (Cocoa/Cocoa Touch) 中常用的类型，用于表示 Unicode 字符。它是一个 `unsigned short` 的类型别名，通常存储 UTF-16 编码单元。

      **语法:**
      - 可以直接赋整数值（字符的 Unicode 码点）。
      - 可以使用单引号 `' '` 赋值（如果字符在 ASCII 范围内）。
      - 对于 ASCII 范围外的字符，直接赋值整数码点更常见。
    example: |
      ```objectivec
      #import <Foundation/Foundation.h>

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              // 声明并初始化 unichar 变量
              unichar copyrightSymbol = 0x00A9; // 版权符号 '©' 的 Unicode 码点 (十六进制)
              unichar heartSymbol = 0x2665; // 心形符号 '♥' 的 Unicode 码点 (十六进制)
              unichar letterA = 'A'; // 也可以直接赋 ASCII 字符

              // 打印 unichar 变量的值，需要先转换为 NSString，因为 NSLog 的 %c 用于 char
              // 使用 +[NSString stringWithCharacters:length:]
              NSString *copyrightString = [NSString stringWithCharacters:&copyrightSymbol length:1];
              NSString *heartString = [NSString stringWithCharacters:&heartSymbol length:1];
              NSString *letterAString = [NSString stringWithCharacters:&letterA length:1];

              NSLog(@"Copyright Symbol: %@", copyrightString); // 输出: Copyright Symbol: ©
              NSLog(@"Heart Symbol: %@", heartString); // 输出: Heart Symbol: ♥
              NSLog(@"Letter A: %@", letterAString); // 输出: Letter A: A

              // 也可以使用 NSLog 的 %C (大写 C) 格式说明符直接打印 unichar
              NSLog(@"Direct print copyright: %C", copyrightSymbol); // 输出: Direct print copyright: ©
              NSLog(@"Direct print heart: %C", heartSymbol); // 输出: Direct print heart: ♥
          }
          return 0;
      }
      ```
  - title: 字符与 NSString 之间的转换
    description: |
      在 Objective-C 中，经常需要在 `char`、`unichar` 和 `NSString` 对象之间进行转换。

      **关键方法/格式化字符串:**
      - `+[NSString stringWithFormat:@"%c", charValue]`: 将 `char` 转换为 `NSString`。
      - `+[NSString stringWithFormat:@"%C", unicharValue]`: 将 `unichar` 转换为 `NSString`。
      - `-[NSString characterAtIndex:index]`: 获取 `NSString` 中指定索引处的 `unichar` 字符。
      - `-[NSString UTF8String]`: 获取 `NSString` 的 UTF-8 编码的 C 字符串 (`const char *`)。可以从中提取 `char`，但要注意多字节字符和编码问题。
      - `-[NSString cStringUsingEncoding:encoding]`: 获取指定编码的 C 字符串 (`const char *`)。
    example: |
      ```objectivec
      #import <Foundation/Foundation.h>

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              // 1. char/unichar 转 NSString
              char myChar = 'X';
              unichar myUnichar = L'π'; // 'π' 的 Unicode 字符

              NSString *stringFromChar = [NSString stringWithFormat:@"%c", myChar];
              NSString *stringFromUnichar = [NSString stringWithFormat:@"%C", myUnichar];

              NSLog(@"String from char '%c': %@", myChar, stringFromChar);
              // 输出: String from char 'X': X
              NSLog(@"String from unichar '%C': %@", myUnichar, stringFromUnichar);
              // 输出: String from unichar 'π': π

              // 2. NSString 转 unichar
              NSString *hello = @"Hello";
              if ([hello length] > 0) {
                  unichar firstChar = [hello characterAtIndex:0]; // 获取第一个字符 'H'
                  NSLog(@"First character of '%@' is '%C' (unichar)", hello, firstChar);
                  // 输出: First character of 'Hello' is 'H' (unichar)
              }

              // 3. NSString 转 char (通过 UTF8String)
              NSString *simpleString = @"ABC";
              const char *utf8CString = [simpleString UTF8String]; // 获取 UTF-8 C 字符串

              if (utf8CString != NULL && strlen(utf8CString) > 1) {
                  char secondChar = utf8CString[1]; // 获取第二个字符 'B'
                  NSLog(@"Second char of '%@' (from UTF8) is '%c'", simpleString, secondChar);
                   // 输出: Second char of 'ABC' (from UTF8) is 'B'
              }

              // 注意：对于非 ASCII 字符，直接从 UTF8String 取单个 char 可能不正确
              NSString *unicodeStr = @"你好";
              const char *utf8你好 = [unicodeStr UTF8String];
              // utf8你好[0] 不是 '你'，而是 '你' 这个汉字的 UTF-8 编码的第一个字节
              NSLog(@"First byte of '你好' in UTF-8: %d", utf8你好[0]); // 输出第一个字节的整数值
          }
          return 0;
      }
      ```
  - title: 访问 NSString 中的字符
    description: |
      `NSString` 是一系列 `unichar` 字符的序列。可以使用 `characterAtIndex:` 方法来访问特定位置的字符。

      **关键方法:**
      - `-[NSString characterAtIndex:index]`: 返回指定索引 `index` 处的 `unichar` 值。索引从 0 开始。如果索引越界，会抛出异常。
      - `-[NSString length]`: 返回字符串中 `unichar` 字符的数量。注意，这可能不等于视觉上的字符数，因为某些 Unicode 字符（如 Emoji）可能由多个 `unichar` 组成（代理对）。

      **获取单个字符的 `NSString` 子串:**
      - `-[NSString substringWithRange:range]`: 可以用来提取包含单个字符的子字符串。
    example: |
      ```objectivec
      #import <Foundation/Foundation.h>

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              NSString *greeting = @"Welcome!";
              NSUInteger len = [greeting length]; // 获取字符串长度 (8)

              if (len > 0) {
                  // 获取第一个字符 (W)
                  unichar firstChar = [greeting characterAtIndex:0];
                  NSLog(@"First char: %C", firstChar); // 输出: First char: W

                  // 获取最后一个字符 (!)
                  unichar lastChar = [greeting characterAtIndex:len - 1];
                  NSLog(@"Last char: %C", lastChar); // 输出: Last char: !
              }

              // 遍历字符串中的每个 unichar
              NSLog(@"Characters in '%@':", greeting);
              for (NSUInteger i = 0; i < len; i++) {
                  unichar currentChar = [greeting characterAtIndex:i];
                  NSLog(@"  Index %lu: %C", (unsigned long)i, currentChar);
              }
              /* 输出:
                 Characters in 'Welcome!':
                   Index 0: W
                   Index 1: e
                   Index 2: l
                   Index 3: c
                   Index 4: o
                   Index 5: m
                   Index 6: e
                   Index 7: !
              */

              // 获取单个字符的子字符串
              if (len > 3) {
                  NSRange range = NSMakeRange(3, 1); // 从索引 3 开始，长度为 1 (字符 'c')
                  NSString *charSubstring = [greeting substringWithRange:range];
                  NSLog(@"Substring for character at index 3: %@", charSubstring); // 输出: Substring for character at index 3: c
              }

              // 处理可能包含代理对的字符 (如 Emoji)
              NSString *emojiString = @"你好😊"; // 😊 可能由两个 unichar 组成
              NSLog(@"Length of '%@' in unichars: %lu", emojiString, [emojiString length]);
              // 输出: Length of '你好😊' in unichars: 4 (你好各占1，😊占2)

              // 正确处理这种字符串需要更复杂的逻辑，例如使用 enumerateSubstringsInRange:options:usingBlock:
              [emojiString enumerateSubstringsInRange:NSMakeRange(0, [emojiString length])
                                             options:NSStringEnumerationByComposedCharacterSequences
                                          usingBlock:^(NSString *substring, NSRange substringRange, NSRange enclosingRange, BOOL *stop) {
                  NSLog(@"Composed character: %@", substring);
              }];
              /* 输出:
                 Composed character: 你
                 Composed character: 好
                 Composed character: 😊
              */
          }
          return 0;
      }
      ```
  - title: 处理字符编码
    description: |
      理解字符编码在处理 `char`、`unichar` 和 `NSString` 时非常重要。
      - `char`: 通常用于 ASCII 或特定 8 位编码（如 Latin-1）。在处理来自外部（如文件、网络）的数据时，需要知道其具体编码。
      - `unichar`: 用于 UTF-16 编码单元，是 Cocoa/Cocoa Touch 内部表示 Unicode 的基础。
      - `NSString`: 内部使用 Unicode (通常是 UTF-16)，并提供了与其他编码（如 UTF-8）进行转换的方法。

      **关键方法/属性:**
      - `-[NSString UTF8String]`: 将 `NSString` 转换为 UTF-8 编码的 C 字符串 (`const char *`)。这是与需要 C 字符串的 API 交互的常用方法。
      - `-[NSString cStringUsingEncoding:]`: 转换为指定编码的 C 字符串。
      - `+[NSString stringWithCString:encoding:]`: 从指定编码的 C 字符串创建 `NSString`。
      - `NSUTF8StringEncoding`, `NSASCIIStringEncoding`, etc.: 用于指定编码的常量。
    example: |
      ```objectivec
      #import <Foundation/Foundation.h>

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              NSString *message = @"这是一个例子。"; // 包含中文字符的 NSString

              // 1. 获取 UTF-8 C 字符串
              const char *utf8Rep = [message UTF8String];
              if (utf8Rep) {
                  NSLog(@"UTF-8 Representation (as string): %s", utf8Rep);
                  // 输出: UTF-8 Representation (as string): 这是一个例子。
                  // 注意： %s 依赖于终端正确处理 UTF-8
                  NSLog(@"Length of UTF-8 C string: %lu bytes", strlen(utf8Rep));
                  // 输出: Length of UTF-8 C string: 25 bytes (每个汉字3字节，句号3字节，英文字母和点各1字节)
              }

              // 2. 从 UTF-8 C 字符串创建 NSString
              // 假设我们有一个 UTF-8 编码的 C 字符串
              const char *receivedData = "Hello from C!";
              NSString *stringFromUTF8 = [NSString stringWithCString:receivedData encoding:NSUTF8StringEncoding];
              if (stringFromUTF8) {
                  NSLog(@"NSString from UTF-8 C string: %@", stringFromUTF8);
                   // 输出: NSString from UTF-8 C string: Hello from C!
              } else {
                  NSLog(@"Failed to create NSString from UTF-8 C string.");
              }

              // 3. 尝试使用错误的编码 (ASCII) 读取包含非 ASCII 字符的 UTF-8 数据
              const char *utf8Chinese = "你好"; // UTF-8 bytes for "你好"
              NSString *stringFromAsciiAttempt = [NSString stringWithCString:utf8Chinese encoding:NSASCIIStringEncoding];
              if (stringFromAsciiAttempt) {
                  NSLog(@"Attempt to read '你好' as ASCII: %@", stringFromAsciiAttempt);
                  // 输出可能为空或者乱码，因为字节序列在 ASCII 下无效
              } else {
                  NSLog(@"Failed to create NSString from '%s' using ASCII encoding (expected).", utf8Chinese);
                  // 输出: Failed to create NSString from '你好' using ASCII encoding (expected).
              }

              // 4. 正确地从 UTF-8 C 字符串创建 NSString
              NSString *correctStringFromUTF8 = [NSString stringWithCString:utf8Chinese encoding:NSUTF8StringEncoding];
              if (correctStringFromUTF8) {
                   NSLog(@"Correctly read '你好' from UTF-8: %@", correctStringFromUTF8);
                   // 输出: Correctly read '你好' from UTF-8: 你好
              }
          }
          return 0;
      }
      ```
