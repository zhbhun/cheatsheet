id: anonymous
title: 闭包
description: Objective‑C 中的 Blocks 是一种强大的语言特性，它允许你创建匿名的、内联的代码块，这些代码块可以像对象一样被传递和存储，并能捕获其定义范围内的变量状态。Blocks 通常用于回调、枚举、并发任务（如 Grand Central Dispatch, GCD）、排序以及其他需要传递代码片段的场景。它通过特殊的 `^` 语法来定义。
usage:
  - title: 创建并立即执行一个简单的 Block
    description: |
      最基础的 Block 用法是定义一个不接受参数也没有返回值的 Block，并立即执行它。这展示了 Block 的基本语法结构。

      **语法:**
      ```objectivec
      ^{
          // Block 内要执行的代码
      }(); // 末尾的 () 表示立即调用该 Block
      ```
    example: |
      ```objectivec
      #import <Foundation/Foundation.h>

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              // 定义一个简单的 Block 并立即执行
              ^{
                  NSLog(@"Hello, Block!"); // 输出: Hello, Block!
              }(); // 注意这里的小括号，表示立即执行
          }
          return 0;
      }
      ```
  - title: 将 Block 赋值给变量
    description: |
      可以将 Block 赋值给一个变量，之后可以像调用函数一样多次调用这个变量。这使得代码块可以被存储和复用。

      **语法:**
      ```objectivec
      返回类型 (^变量名)(参数类型列表) = ^(参数列表) {
          // Block 内要执行的代码
          return 返回值; // 如果有返回值
      };

      // 调用 Block
      变量名(参数);
      ```
      - `返回类型`: Block 执行后返回的数据类型。如果无返回值，则为 `void`。
      - `(^变量名)`: 定义一个名为 `变量名` 的 Block 变量。`^` 是 Block 类型的标志。
      - `(参数类型列表)`: Block 接受的参数类型列表，用逗号分隔。如果无参数，则为 `void`。
      - `^(参数列表)`: Block 实现部分的开始，定义实际接收的参数名。
      - `{ ... }`: Block 的代码体。
    example: |
      ```objectivec
      #import <Foundation/Foundation.h>

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              // 声明一个无参数、无返回值的 Block 变量 myBlock
              void (^myBlock)(void);

              // 将一个 Block 赋值给 myBlock
              myBlock = ^{
                  NSLog(@"This is myBlock!");
              };

              // 调用 myBlock
              myBlock(); // 输出: This is myBlock!

              // 声明并初始化一个接受两个 int 参数并返回 int 的 Block 变量 addBlock
              int (^addBlock)(int, int) = ^(int a, int b) {
                  return a + b; // 返回两个整数的和
              };

              // 调用 addBlock
              int sum = addBlock(5, 3);
              NSLog(@"Sum: %d", sum); // 输出: Sum: 8
          }
          return 0;
      }
      ```
  - title: Block 接受参数和返回值
    description: |
      Block 可以像函数一样接受参数并返回值。定义时需要指定参数类型和返回类型。
    example: |
      ```objectivec
      #import <Foundation/Foundation.h>

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              // 定义一个接受 NSString 参数并返回 NSString 的 Block
              NSString* (^greetingBlock)(NSString *) = ^(NSString *name) {
                  return [NSString stringWithFormat:@"Hello, %@!", name]; // 返回格式化后的问候语
              };

              // 调用 Block 并传递参数
              NSString *message = greetingBlock(@"World");
              NSLog(@"%@", message); // 输出: Hello, World!

              // 定义一个接受 double 参数并返回 double 的 Block (计算平方)
              double (^squareBlock)(double) = ^double(double num) { // 可以显式指定返回类型
                  return num * num;
              };

              double result = squareBlock(4.5);
              NSLog(@"Square of 4.5 is: %f", result); // 输出: Square of 4.5 is: 20.250000
          }
          return 0;
      }
      ```
  - title: 在 Block 内部捕获外部变量（只读）
    description: |
      Block 可以“捕获”（capture）其定义时所在作用域的变量。默认情况下，捕获的是变量在定义 Block 时的**值**（对于基本类型）或**指针**（对于对象类型），并且在 Block 内部是只读的（不能修改）。
    example: |
      ```objectivec
      #import <Foundation/Foundation.h>

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              int outerVariable = 10;
              NSString *outerString = @"Initial String";

              // 定义一个 Block，捕获外部变量
              void (^captureBlock)(void) = ^{
                  // 尝试访问外部变量 (可以访问)
                  NSLog(@"Inside block - outerVariable: %d", outerVariable); // 输出: Inside block - outerVariable: 10
                  NSLog(@"Inside block - outerString: %@", outerString); // 输出: Inside block - outerString: Initial String

                  // 尝试修改外部基本类型变量 (会编译错误)
                  // outerVariable = 20; // Error: Variable is not assignable (missing __block type specifier)

                  // 尝试修改外部对象指针 (会编译错误)
                  // outerString = @"New String"; // Error: Variable is not assignable (missing __block type specifier)

                  // 可以调用对象的方法 (如果对象是可变的，其内部状态可以改变)
                  NSMutableString *mutableStr = [NSMutableString stringWithString:@"Mutable"];
                   void (^modifyMutableBlock)(void) = ^{
                       [mutableStr appendString:@" Modified"]; // 可以修改可变对象的内容
                       NSLog(@"Inside modifyMutableBlock: %@", mutableStr);
                   };
                   modifyMutableBlock(); // 输出: Inside modifyMutableBlock: Mutable Modified
                   NSLog(@"Outside modifyMutableBlock: %@", mutableStr); // 输出: Outside modifyMutableBlock: Mutable Modified
              };

              // 调用 Block
              captureBlock();

              // 在 Block 定义后修改外部变量，Block 内部的值不会改变
              outerVariable = 100;
              outerString = @"Changed String";
              NSLog(@"Outside block - outerVariable: %d", outerVariable); // 输出: Outside block - outerVariable: 100
              NSLog(@"Outside block - outerString: %@", outerString); // 输出: Outside block - outerString: Changed String

              // 再次调用 Block，捕获的值仍然是定义时的值
              captureBlock(); // 仍然输出 10 和 Initial String
          }
          return 0;
      }
      ```
  - title: 使用 __block 修饰符修改外部变量
    description: |
      如果需要在 Block 内部修改外部的局部变量（基本类型或对象指针本身），必须在变量声明前加上 `__block` 修饰符。这使得 Block 捕获的是变量的引用（或一个包含该变量的特殊结构），从而可以在 Block 内部修改它。

      **语法:**
      ```objectivec
      __block 类型 变量名 = 初始值;

      返回类型 (^block变量名)(参数列表) = ^(参数列表) {
          // 现在可以修改被 __block 修饰的变量了
          变量名 = 新值;
      };
      ```
    example: |
      ```objectivec
      #import <Foundation/Foundation.h>

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              // 使用 __block 修饰符声明变量
              __block int counter = 0;
              __block NSString *status = @"Pending";

              // 定义一个 Block，该 Block 会修改外部的 __block 变量
              void (^modifyBlock)(void) = ^{
                  counter++; // 可以修改 counter
                  status = @"Completed"; // 可以修改 status 指向的对象
                  NSLog(@"Inside block - counter: %d", counter);
                  NSLog(@"Inside block - status: %@", status);
              };

              NSLog(@"Before block - counter: %d", counter); // 输出: Before block - counter: 0
              NSLog(@"Before block - status: %@", status); // 输出: Before block - status: Pending

              // 调用 Block
              modifyBlock();
              // 输出:
              // Inside block - counter: 1
              // Inside block - status: Completed

              NSLog(@"After block - counter: %d", counter); // 输出: After block - counter: 1 (值已被修改)
              NSLog(@"After block - status: %@", status); // 输出: After block - status: Completed (指针已被修改)
          }
          return 0;
      }
      ```
  - title: 将 Block 作为方法或函数的参数
    description: |
      Block 最常见的用途之一是作为方法或函数的参数，尤其用于回调（Callback）。例如，在网络请求完成后执行代码，或在数组遍历时对每个元素执行操作。
    example: |
      ```objectivec
      #import <Foundation/Foundation.h>

      // 假设有一个类，它有一个方法接受 Block 作为参数
      @interface TaskRunner : NSObject
      // 该方法执行一个模拟任务，并在完成后调用 completion Block
      - (void)runTaskWithCompletion:(void (^)(BOOL success, NSString *message))completionHandler;
      @end

      @implementation TaskRunner
      - (void)runTaskWithCompletion:(void (^)(BOOL success, NSString *message))completionHandler {
          NSLog(@"Task started...");
          // 模拟耗时操作
          dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
              NSLog(@"Task finished.");
              // 任务完成，调用 completion Block 并传递结果
              if (completionHandler) { // 检查 Block 是否为 nil
                  BOOL taskSuccess = YES; // 假设任务成功
                  NSString *resultMessage = @"Task completed successfully!";
                  completionHandler(taskSuccess, resultMessage); // 调用传入的 Block
              }
          });
      }
      @end

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              TaskRunner *runner = [[TaskRunner alloc] init];

              // 调用方法，并传入一个 Block 作为 completionHandler
              [runner runTaskWithCompletion:^(BOOL success, NSString *message) {
                  // 这是在任务完成后会被执行的代码
                  if (success) {
                      NSLog(@"Completion Handler: Success! Message: %@", message);
                  } else {
                      NSLog(@"Completion Handler: Failed! Message: %@", message);
                  }
              }];

              NSLog(@"Method call returned, but task is running in background.");
              // 为了让后台任务有时间执行完并调用 Block，需要保持主线程运行
              [[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:3]];
          }
          return 0;
      }
      // 输出 (顺序可能略有不同，但 Completion Handler 总在 Task finished 之后):
      // Task started...
      // Method call returned, but task is running in background.
      // (大约 2 秒后)
      // Task finished.
      // Completion Handler: Success! Message: Task completed successfully!
      ```
  - title: 使用 typedef 定义 Block 类型
    description: |
      当 Block 的签名（参数类型和返回类型）变得复杂或需要重复使用时，可以使用 `typedef` 为该 Block 类型创建一个别名。这可以使代码更清晰、更易于维护。

      **语法:**
      ```objectivec
      typedef 返回类型 (^类型别名)(参数类型列表);
      ```
      之后就可以使用 `类型别名` 来声明 Block 变量或指定方法/函数的参数类型。
    example: |
      ```objectivec
      #import <Foundation/Foundation.h>

      // 使用 typedef 定义一个 Block 类型别名
      typedef void (^CompletionHandler)(BOOL success, NSString *message);

      // 使用别名作为方法参数类型
      @interface DataFetcher : NSObject
      - (void)fetchDataWithCompletion:(CompletionHandler)handler;
      @end

      @implementation DataFetcher
      - (void)fetchDataWithCompletion:(CompletionHandler)handler {
          NSLog(@"Fetching data...");
          // 模拟异步获取数据
          dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
              if (handler) {
                  handler(YES, @"Data fetched successfully."); // 使用 handler 调用 Block
              }
          });
      }
      @end

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              DataFetcher *fetcher = [[DataFetcher alloc] init];

              // 声明一个 Block 变量，使用 typedef 定义的类型别名
              CompletionHandler myHandler = ^(BOOL success, NSString *message) {
                  NSLog(@"Data fetch result: %d - %@", success, message);
              };

              // 调用方法，传入 Block 变量
              [fetcher fetchDataWithCompletion:myHandler];

              [[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:2]];
          }
          return 0;
      }
      // 输出:
      // Fetching data...
      // (大约 1 秒后)
      // Data fetch result: 1 - Data fetched successfully.
      ```
  - title: 在 Grand Central Dispatch (GCD) 中使用 Block
    description: |
      Blocks 是 GCD（Grand Central Dispatch）的核心，用于将任务提交到不同的调度队列（dispatch queue）上执行，常用于实现并发和异步操作。`dispatch_async` 和 `dispatch_sync` 等函数都接受 Block 作为参数。
    example: |
      ```objectivec
      #import <Foundation/Foundation.h>

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              NSLog(@"Starting tasks...");

              // 获取一个全局并发队列
              dispatch_queue_t backgroundQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
              // 获取主队列（用于 UI 更新）
              dispatch_queue_t mainQueue = dispatch_get_main_queue();

              // 异步提交一个任务到后台队列
              dispatch_async(backgroundQueue, ^{
                  // 这个 Block 会在后台线程执行
                  NSLog(@"Task 1: Running in background thread: %@", [NSThread currentThread]);
                  // 模拟耗时操作
                  [NSThread sleepForTimeInterval:2.0];
                  NSLog(@"Task 1: Finished.");

                  // 如果需要在任务完成后更新 UI，需要切换回主队列
                  dispatch_async(mainQueue, ^{
                      // 这个 Block 会在主线程执行
                      NSLog(@"Task 1 Completion: Running in main thread: %@", [NSThread currentThread]);
                      NSLog(@"Task 1 Completion: Update UI here.");
                  });
              });

              // 异步提交另一个任务到后台队列
              dispatch_async(backgroundQueue, ^{
                  // 这个 Block 也会在后台线程执行 (可能与 Task 1 并发)
                  NSLog(@"Task 2: Running in background thread: %@", [NSThread currentThread]);
                  [NSThread sleepForTimeInterval:1.0];
                  NSLog(@"Task 2: Finished.");
                  dispatch_async(mainQueue, ^{
                       NSLog(@"Task 2 Completion: Running in main thread: %@", [NSThread currentThread]);
                  });
              });

              NSLog(@"Tasks submitted. Main thread continues execution.");

              // 保持程序运行足够长的时间以观察异步任务的输出
              [[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:4]];
          }
          return 0;
      }
      // 输出类似 (线程信息和顺序可能变化):
      // Starting tasks...
      // Tasks submitted. Main thread continues execution.
      // Task 1: Running in background thread: <NSThread: ...>{number = ..., name = (null)}
      // Task 2: Running in background thread: <NSThread: ...>{number = ..., name = (null)}
      // (大约 1 秒后)
      // Task 2: Finished.
      // Task 2 Completion: Running in main thread: <NSThread: ...>{number = 1, name = main}
      // (大约再过 1 秒后)
      // Task 1: Finished.
      // Task 1 Completion: Running in main thread: <NSThread: ...>{number = 1, name = main}
      // Task 1 Completion: Update UI here.
      ```
  - title: Block 与内存管理 (ARC 下的循环引用)
    description: |
      在 ARC (Automatic Reference Counting) 环境下，Block 会强引用（retain）其捕获的外部对象。如果一个对象持有了一个 Block，而这个 Block 又强引用了该对象（例如在 Block 内部使用了 `self`），就会产生循环引用（Retain Cycle），导致对象和 Block 都无法被释放，造成内存泄漏。

      **解决方法:** 在 Block 内部使用对象的弱引用（weak reference）。通常通过创建一个 `__weak` 的指向 `self` 的指针，然后在 Block 内部使用这个弱引用指针。如果需要在 Block 执行期间保证对象存在，可以在 Block 开头将弱引用转回强引用。

      **语法:**
      ```objectivec
      __weak typeof(self) weakSelf = self; // 创建 self 的弱引用
      self.myBlock = ^{
          __strong typeof(weakSelf) strongSelf = weakSelf; // 在 Block 开头将弱引用转回强引用 (可选但推荐)
          if (strongSelf) { // 检查 strongSelf 是否还存在
              // 使用 strongSelf 访问对象的属性或方法
              NSLog(@"%@", strongSelf.someProperty);
              [strongSelf doSomething];
          } else {
              // self 已经被释放了
              NSLog(@"Self is nil");
          }
      };
      ```
    example: |
      ```objectivec
      #import <Foundation/Foundation.h>

      // 定义一个 Block 类型别名
      typedef void (^MyBlockType)(void);

      @interface MyObject : NSObject
      @property (nonatomic, strong) NSString *name;
      @property (nonatomic, copy) MyBlockType block; // 持有 Block
      - (void)setupBlock;
      - (void)executeBlock;
      @end

      @implementation MyObject

      - (instancetype)initWithName:(NSString *)name {
          self = [super init];
          if (self) {
              _name = name;
              NSLog(@"%@ initialized.", _name);
          }
          return self;
      }

      - (void)setupBlock {
          // 错误示范：直接在 Block 中使用 self 会导致循环引用
          // self.block = ^{
          //     NSLog(@"Block executed by: %@", self.name); // Block 强引用 self
          // };

          // 正确示范：使用 weak-strong dance 避免循环引用
          __weak typeof(self) weakSelf = self; // 创建弱引用
          self.block = ^{
              __strong typeof(weakSelf) strongSelf = weakSelf; // 转回强引用
              if (strongSelf) { // 检查对象是否存在
                  NSLog(@"Block executed by: %@", strongSelf.name); // 使用 strongSelf
              } else {
                  NSLog(@"Block executed, but self is gone.");
              }
          };
          NSLog(@"%@ setup block.", self.name);
      }

      - (void)executeBlock {
          if (self.block) {
              self.block();
          }
      }

      - (void)dealloc {
          // 当对象被销毁时，会调用 dealloc 方法
          NSLog(@"%@ deallocated.", self.name);
      }

      @end

      int main(int argc, const char * argv[]) {
          @autoreleasepool {
              MyObject *obj = [[MyObject alloc] initWithName:@"MyObjectInstance"];
              [obj setupBlock];
              [obj executeBlock]; // 输出: Block executed by: MyObjectInstance

              // 当 obj 离开作用域时，ARC 会尝试释放它。
              // 如果存在循环引用，dealloc 不会被调用。
              // 使用了 weak-strong dance 后，循环引用被打破，dealloc 会被调用。
              NSLog(@"obj is about to be released.");
          } // obj 在这里离开作用域
          // 如果看到 "MyObjectInstance deallocated." 输出，说明没有内存泄漏。
          return 0;
      }
      // 输出:
      // MyObjectInstance initialized.
      // MyObjectInstance setup block.
      // Block executed by: MyObjectInstance
      // obj is about to be released.
      // MyObjectInstance deallocated.
      ```
