id: grid
title: Grid
query: CSS Grid layout
comment: 详细介绍下 Grid 布局的用法。
description: CSS Grid Layout 是一种二维布局系统，它可以将页面划分成主要的区域，或者定义 HTML 元素之间的大小、位置和层级关系。它允许开发者像表格一样将元素排列成行和列，但比表格布局更强大和灵活，可以实现更多复杂的布局。
usage:
  - title: 创建 Grid 容器
    description: '使用 `display: grid` 或 `display: inline-grid` 将一个 HTML 元素转换成 Grid 容器。其直接子元素将自动成为 Grid 项目。'
    example: |
      ```html
      <div class="container">
        <div class="item">1</div>
        <div class="item">2</div>
        <div class="item">3</div>
      </div>
      ```
      ```css
      .container {
        display: grid; /* 或 display: inline-grid */
      }
      ```
  - title: 定义列和行
    description: |
      - `grid-template-columns`: 定义列的宽度。可以使用各种单位，例如 px、fr（分数）、百分比、auto 等。
      - `grid-template-rows`: 定义行的高度。可以使用与 `grid-template-columns` 相同的单位。
      - `repeat()` 函数:  简化重复的列或行定义。例如，`repeat(3, 1fr)` 表示创建 3 列，每列宽度相等，占可用空间的 1/3。
      - `minmax()` 函数：定义 Grid 行或列的最小和最大尺寸。例如 `minmax(100px, auto)` 表示最小高度为 100px，最大高度根据内容自适应。
    example: |
      ```css
      .container {
        display: grid;
        grid-template-columns: 1fr 2fr 1fr; /* 三列，比例为 1:2:1 */
        grid-template-rows: repeat(2, 100px); /* 两行，每行高度 100px */
      }
      ```
  - title: 设置间距
    description: |
      - `gap`（或 `grid-gap`）：`row-gap` 和 `column-gap` 的简写，用于设置行和列之间的间距。
      - `row-gap`: 设置行间距。
      - `column-gap`: 设置列间距。
    example: |
      ```css
      .container {
        gap: 10px; /* 行和列间距都为 10px */
      }
      ```
  - title: 放置 Grid 项目
    description: |
      - 基于线的放置：使用 `grid-column-start`、`grid-column-end`、`grid-row-start` 和 `grid-row-end` 属性指定 Grid 项目的起始和结束网格线。
      - 基于区域的放置：使用 `grid-template-areas` 为 Grid 区域命名，然后使用 `grid-area` 属性将 Grid 项目放置到指定的区域。
      - `grid-column` 和 `grid-row` 是 `grid-column-start`/`grid-column-end` 和 `grid-row-start`/`grid-row-end` 的简写形式。
    example: |
      ```css
      .container {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        grid-template-rows: repeat(2, 100px);
      }

      .item-1 {
        grid-column: 1 / 3; /* 从第 1 条列线到第 3 条列线 */
        grid-row: 1;  /* 占据第一行 */
      }

      .item-2 {
        grid-area: 2 / 2 / 3 / 4; /* 从第 2 行，第 2 列开始，到第 3 行，第 4 列结束 */
      }

       .container {
          display: grid;
          grid-template-columns: 1fr 1fr 1fr;
          grid-template-rows: 1fr 1fr;
          grid-template-areas: 
            "header header header"
            "main . sidebar";
        }
        header { grid-area: header;}
        main { grid-area: main; }
        sidebar { grid-area: sidebar; }

      ```
  - title: 控制 Grid 项目的大小和对齐方式
    description: |
      - `align-items`: 垂直方向对齐。
      - `justify-items`: 水平方向对齐。
      - `align-content`:  多行内容对齐方式。
      - `justify-content`: 多列内容对齐方式。
    example: |
      ```css
      .container {
        align-items: center; /* 垂直居中 */
        justify-content: space-around; /* 水平方向均匀分布 */
      }
      ```
  - title: 自动放置 Grid 项目
    description: |
      使用 `grid-auto-flow` 属性控制自动放置 Grid 项目的顺序和方向。
      - `row`: 优先按行填充。
      - `column`: 优先按列填充。
      - `dense`: 允许项目紧密排列，填补空隙。
      `grid-auto-rows` 和 `grid-auto-columns` 定义自动创建的行和列的大小。
    example: |
      ```css
      .container {
        grid-auto-flow: column dense;
        grid-auto-rows: 50px; 
        grid-auto-columns: 100px;
      }
      ```
references:
  - title: 'CSS grid layout - CSS: Cascading Style Sheets | MDN'
    url: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout
  - title: CSS Grid Layout Module
    url: https://www.w3schools.com/css/css_grid.asp
