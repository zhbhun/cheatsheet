id: generic
title: 函数泛型
description: |
  函数泛型允许在 Kotlin 中编写能够处理多种数据类型的函数，而不牺牲类型安全性。通过在函数声明中使用类型参数，您可以编写更加灵活和可重用的代码。Kotlin 泛型可以分为普通泛型和具有约束的泛型，前者适用于任何类型，后者则对类型参数施加了特定的条件。
example: |
  // 普通泛型函数：不对类型参数进行任何限制
  fun <T> identity(item: T): T {
      return item
  }

  fun main() {
      val intItem = identity(42) // 适用于 Int 类型
      val stringItem = identity("Hello") // 适用于 String 类型
      println(intItem) // 输出: 42
      println(stringItem) // 输出: Hello
  }

  // 泛型约束：类型参数必须实现 Comparable 接口
  fun <T : Comparable<T>> maxOf(a: T, b: T): T {
      return if (a > b) a else b
  }

  fun main() {
      val maxInt = maxOf(10, 67) // 适用于 Int 类型
      println(maxInt) // 输出: 67

      val maxString = maxOf("apple", "banana") // 适用于 String 类型
      println(maxString) // 输出: banana
  }
references:
  - title: Generic functions
    url: https://kotlinlang.org/docs/generics.html#generic-functions
