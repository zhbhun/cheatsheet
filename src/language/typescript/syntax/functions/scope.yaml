id: scope
title: 作用域
description: |
  函数作用域是常见的作用域之一，函数内部定义的变量只在函数内部可见。除此之外，`this` 关键字、箭头函数、以及 `bind`、`apply`、`call` 方法在作用域管理中扮演着重要角色。

  - `this` 是动态绑定的，它的值取决于函数的调用方式。
  - `bind`、`apply` 和 `call` 方法可以显式地绑定 `this`。
  - 箭头函数则会捕获其定义时的 `this`，并在执行时保持不变。
example: |
  function exampleFunction(message) {
      console.log(this.value, message);
  }

  const obj = { value: 42 };

  // 使用 bind 创建一个新函数，绑定 this 到 obj
  const boundFunction = exampleFunction.bind(obj, 'Hello');
  boundFunction(); // 输出：42 'Hello'

  // 使用 call 立即调用函数，this 指向 obj
  exampleFunction.call(obj, 'Hello'); // 输出：42 'Hello'

  // 使用 apply 立即调用函数，参数以数组形式传递
  exampleFunction.apply(obj, ['Hello']); // 输出：42 'Hello'

  // 箭头函数的 'this' 在定义时确定
  const arrowFunction = () => {
      console.log(this); // 
  };
  arrowFunction.call({ value: 42 }); // 输出：定义时的 'this' 而非 { value: 42 }
  
  const person = {
      age: 25,
      growOld: function() {
          this.age++;
      }
  };
  setTimeout(person.growOld, 1000); // 在浏览器中运行，'this' 指向全局对象

  const personWithArrow = {
      age: 25,
      growOld: function() {
          const arrowFunc = () => this.age++;
          arrowFunc(); // 'this' 仍然指向 personWithArrow 对象
      }
  };
  setTimeout(() => personWithArrow.growOld(), 1000); // 'this' 绑定到 personWithArrow
references:
  - title: this
    url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this
  - title: TypeScript Arrow Functions - Deep Dive
    url: https://basarat.gitbook.io/typescript/docs/arrow-functions
  - title: Understanding Arrow Functions
    url: https://learn.codesignal.com/preview/lessons/1770/understanding-arrow-functions
