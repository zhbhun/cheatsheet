id: transform
title: 变换
query: Swift UIKit Transform
comment: Swift UIKit 视图的变换样式
description: 在 Swift UIKit 中，可以使用 `CGAffineTransform` 结构体对视图进行变换，例如缩放、旋转、平移等。变换是相对于视图中心点进行的。`transform` 属性不会影响自动布局，自动布局会根据视图未变换的 frame 计算其对齐矩形。
usage:
  - title: 缩放
    description: 使用 `CGAffineTransform(scaleX:y:)` 初始化器创建缩放变换，分别指定水平和垂直方向的缩放比例。`1.0` 表示默认大小，大于 `1.0` 放大，小于 `1.0` 缩小。
    example: |
      ```swift
      // 将 imageView 放大 2 倍
      imageView.transform = CGAffineTransform(scaleX: 2, y: 2)

      // 将 imageView 缩小到一半
      imageView.transform = CGAffineTransform(scaleX: 0.5, y: 0.5)
      ```
  - title: 旋转
    description: |
      使用 `CGAffineTransform(rotationAngle:)` 初始化器创建旋转变换，参数为旋转角度（以弧度为单位）。
      - 需要将角度转换为弧度，可以使用 `CGFloat.pi` 表示 π。
      - Core Animation 会选择最短路径进行旋转。
      - 旋转 360 度或其倍数不会产生任何动画效果。
    example: |
      ```swift
      // 将 imageView 顺时针旋转 45 度
      imageView.transform = CGAffineTransform(rotationAngle: CGFloat.pi / 4)

      // 将 imageView 逆时针旋转 90 度
      imageView.transform = CGAffineTransform(rotationAngle: -CGFloat.pi / 2)
      ```
  - title: 平移
    description: 使用 `CGAffineTransform(translationX:y:)` 初始化器创建平移变换，分别指定水平和垂直方向的位移量。
    example: |
      ```swift
      // 将 imageView 向右平移 50 点，向下平移 100 点
      imageView.transform = CGAffineTransform(translationX: 50, y: 100)

      // 将 imageView 向左平移 25 点，向上平移 75 点
      imageView.transform = CGAffineTransform(translationX: -25, y: -75)
      ```
  - title: 组合变换
    description: |
      可以使用以下方法组合多个变换：
      - 使用 `concatenating(_:)` 方法将两个变换矩阵相乘，得到一个新的变换矩阵，表示先进行第一个变换，再进行第二个变换。
      - 使用 `scaledBy(x:y:)`、`rotated(by:)`、`translatedBy(x:y:)` 方法在现有变换的基础上进行缩放、旋转和平移。
    example: |
      ```swift
      // 先将 imageView 缩小到一半，然后顺时针旋转 45 度
      let transform = CGAffineTransform(scaleX: 0.5, y: 0.5).rotated(by: CGFloat.pi / 4)
      imageView.transform = transform

      // 先将 imageView 向右平移 50 点，然后在现有变换的基础上放大 2 倍
      imageView.transform = imageView.transform.translatedBy(x: 50, y: 0).scaledBy(x: 2, y: 2)
      ```
  - title: 重置变换
    description: 将 `transform` 属性设置为 `CGAffineTransform.identity` 可以重置视图的所有变换，使其恢复到默认状态。
    example: |
      ```swift
      // 重置 imageView 的所有变换
      imageView.transform = .identity
      ```
  - title: 动画
    description: 可以在动画块中修改 `transform` 属性，以实现平滑的变换动画效果。可以使用 `UIView.animate(withDuration:animations:)` 方法创建动画。
    example: |
      ```swift
      // 在 0.5 秒内将 imageView 顺时针旋转 90 度
      UIView.animate(withDuration: 0.5) {
          self.imageView.transform = CGAffineTransform(rotationAngle: CGFloat.pi / 2)
      }
      ```
references:
  - title: transform | Apple Developer Documentation
    url: https://developer.apple.com/documentation/uikit/uiview/1622459-transform
  - title: 'Transform: CGAffineTransform'
    url: https://www.hackingwithswift.com/read/15/4/transform-cgaffinetransform
  - title: rotation - How do you apply a transform to a UILabel before ...
    url: https://stackoverflow.com/questions/53766632/how-do-you-apply-a-transform-to-a-uilabel-before-animating-in-swift
