id: collection
title: UICollectionView
query: Swift UICollectionView
comment: |
  详细介绍 Swift UICollectionView 的用法
  - 如何创建一个 UICollectionView，并设置数据源委托、视图委托和自定义单元格
  - 如何使用 UICollectionViewDiffableDataSource 管理数据源的新增、修改、移动和删除
  - 如何自定义 UICollectionView 的布局，实现瀑布流、分组、分区等复杂布局
description: UICollectionView 是 UIKit 框架中用于以网格形式展示和管理有序数据集合的对象，它使用灵活的布局方式来呈现数据，支持垂直、水平滚动，以及自定义布局等。
usage:
  - title: 创建 UICollectionView
    description: |-
      在代码中创建 UICollectionView 通常需要指定一个布局（如 `UICollectionViewFlowLayout`），并通过设置数据源和委托来管理内容和交互。该示例展示如何在 `UIViewController` 中创建 UICollectionView。
    example: |
      ```swift
      import UIKit
      import SnapKit

      class ViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate {

        enum Section: Int, CaseIterable {
          case first
          case second

          var title: String {
            switch self {
            case .first:
              return "First Section"
            case .second:
              return "Second Section"
            }
          }
        }

        class Item {
          let id: UUID
          var title: String

          init(id: UUID, title: String) {
            self.id = id
            self.title = title
          }
        }

        var collectionView: UICollectionView! = nil
        var itemsFirstSection: [Item] = []
        var itemsSecondSection: [Item] = []

        override func viewDidLoad() {
          super.viewDidLoad()

          title = "UICollectionViewDataSource"

          configureCollectionView()
          applyInitialData()
          setupActionButtons()
        }

        // 配置 CollectionView
        private func configureCollectionView() {
          let layout = UICollectionViewFlowLayout()
          layout.itemSize = CGSize(width: UIScreen.main.bounds.width - 30, height: 100)
          layout.headerReferenceSize = CGSize(width: UIScreen.main.bounds.width, height: 50)

          collectionView = UICollectionView(frame: view.bounds, collectionViewLayout: layout)
          collectionView.backgroundColor = .systemBackground
          collectionView.dataSource = self
          collectionView.delegate = self
          collectionView.register(FirstCell.self, forCellWithReuseIdentifier: "FirstCell")
          collectionView.register(SecondCell.self, forCellWithReuseIdentifier: "SecondCell")
          collectionView.register(CustomHeader.self, forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: "header")

          view.addSubview(collectionView)
        }

        // 配置初始数据
        private func applyInitialData() {
          itemsFirstSection = (1...10).map { Item(id: UUID(), title: "First Section Item \($0)") }
          itemsSecondSection = (1...10).map { Item(id: UUID(), title: "Second Section Item \($0)") }
          collectionView.reloadData()
        }

        // 设置操作按钮
        private func setupActionButtons() {
          let buttonStack = UIStackView()
          buttonStack.axis = .horizontal
          buttonStack.spacing = 10
          buttonStack.distribution = .fillEqually

          let insertButton = UIButton(type: .system)
          insertButton.setTitle("Insert", for: .normal)
          insertButton.addTarget(self, action: #selector(insertItem), for: .touchUpInside)

          let deleteButton = UIButton(type: .system)
          deleteButton.setTitle("Delete", for: .normal)
          deleteButton.addTarget(self, action: #selector(deleteItem), for: .touchUpInside)

          let moveButton = UIButton(type: .system)
          moveButton.setTitle("Move", for: .normal)
          moveButton.addTarget(self, action: #selector(moveItem), for: .touchUpInside)

          let updateButton = UIButton(type: .system)
          updateButton.setTitle("Update", for: .normal)
          updateButton.addTarget(self, action: #selector(updateItem), for: .touchUpInside)

          buttonStack.addArrangedSubview(insertButton)
          buttonStack.addArrangedSubview(deleteButton)
          buttonStack.addArrangedSubview(moveButton)
          buttonStack.addArrangedSubview(updateButton)

          let container = UIView()
          container.backgroundColor = .white
          container.addSubview(buttonStack)
          view.addSubview(container)

          container.snp.makeConstraints { make in
            make.bottom.equalToSuperview()
            make.leading.equalToSuperview()
            make.trailing.equalToSuperview()
          }

          buttonStack.snp.makeConstraints { make in
            make.top.equalToSuperview().offset(10)
            make.bottom.equalToSuperview().offset(-34)
            make.leading.equalToSuperview().offset(15)
            make.trailing.equalToSuperview().offset(-15)
          }
        }

        // 插入新项
        @objc private func insertItem() {
          let newItem = Item(id: UUID(), title: "New Item")
          itemsFirstSection.insert(newItem, at: 0)
          collectionView.insertItems(at: [IndexPath(item: 0, section: Section.first.rawValue)])
        }

        // 删除项
        @objc private func deleteItem() {
          guard !itemsFirstSection.isEmpty else { return }
          itemsFirstSection.removeFirst()
          collectionView.deleteItems(at: [IndexPath(item: 0, section: Section.first.rawValue)])
        }

        // 移动项
        @objc private func moveItem() {
          guard itemsFirstSection.count > 1 else { return }
          let itemToMove = itemsFirstSection.removeFirst()
          itemsFirstSection.append(itemToMove)
          collectionView.moveItem(at: IndexPath(item: 0, section: Section.first.rawValue), to: IndexPath(item: itemsFirstSection.count - 1, section: Section.first.rawValue))
        }

        // 更新项
        @objc private func updateItem() {
          guard !itemsFirstSection.isEmpty else { return }
          itemsFirstSection[0].title = "Updated \(itemsFirstSection[0].title)"
          collectionView.reloadItems(at: [IndexPath(item: 0, section: Section.first.rawValue)])
        }

        // MARK: - UICollectionViewDataSource

        func numberOfSections(in collectionView: UICollectionView) -> Int {
          return Section.allCases.count
        }

        func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
          let sectionType = Section(rawValue: section)
          switch sectionType {
          case .first:
            return itemsFirstSection.count
          case .second:
            return itemsSecondSection.count
          default:
            return 0
          }
        }

        func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
          let sectionType = Section(rawValue: indexPath.section)
          switch sectionType {
          case .first:
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "FirstCell", for: indexPath) as! FirstCell
            cell.label.text = itemsFirstSection[indexPath.item].title
            return cell
          case .second:
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "SecondCell", for: indexPath) as! SecondCell
            cell.label.text = itemsSecondSection[indexPath.item].title
            return cell
          default:
            return UICollectionViewCell()
          }
        }

        func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
          guard kind == UICollectionView.elementKindSectionHeader else { return UICollectionReusableView() }
          let header = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: "header", for: indexPath) as! CustomHeader
          header.label.text = Section.allCases[indexPath.section].title
          return header
        }

        func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
          let sectionType = Section(rawValue: indexPath.section)
          let selectedItem: Item
          switch sectionType {
          case .first:
            selectedItem = itemsFirstSection[indexPath.item]
          case .second:
            selectedItem = itemsSecondSection[indexPath.item]
          default:
            return
          }

          // 打印点击的项信息
          print("Selected item in \(sectionType?.title ?? "Unknown Section"): \(selectedItem.title), ID: \(selectedItem.id)")
        }
      }


      // 自定义第一种单元格
      fileprivate class FirstCell: UICollectionViewCell {
        let label: UILabel = {
          let label = UILabel()
          label.textAlignment = .center
          label.textColor = .white
          return label
        }()

        override init(frame: CGRect) {
          super.init(frame: frame)
          contentView.addSubview(label)
          contentView.backgroundColor = .blue
          label.snp.makeConstraints { make in
            make.centerY.equalToSuperview()
            make.left.equalToSuperview().offset(15)
            make.right.equalToSuperview().offset(-15)
          }
        }

        required init?(coder: NSCoder) {
          super.init(coder: coder)
        }
      }

      // 自定义第二种单元格
      fileprivate class SecondCell: UICollectionViewCell {
        let label: UILabel = {
          let label = UILabel()
          label.textAlignment = .center
          label.textColor = .white
          return label
        }()

        override init(frame: CGRect) {
          super.init(frame: frame)
          contentView.addSubview(label)
          contentView.backgroundColor = .red
          label.snp.makeConstraints { make in
            make.centerY.equalToSuperview()
            make.left.equalToSuperview().offset(15)
            make.right.equalToSuperview().offset(-15)
          }
        }

        required init?(coder: NSCoder) {
          super.init(coder: coder)
        }
      }

      // 自定义头部视图
      fileprivate class CustomHeader: UICollectionReusableView {
        let label: UILabel = {
          let label = UILabel()
          label.textAlignment = .center
          label.textColor = .black
          label.font = UIFont.boldSystemFont(ofSize: 20)
          return label
        }()

        override init(frame: CGRect) {
          super.init(frame: frame)
          addSubview(label)
          label.snp.makeConstraints { make in
            make.edges.equalToSuperview().inset(10)
          }
        }

        required init?(coder: NSCoder) {
          super.init(coder: coder)
        }
      }
      ```
  - title: 使用 UICollectionViewDiffableDataSource 管理数据源
    description: |-
      UICollectionViewDiffableDataSource 是 iOS 13 推出的新 API，用于更轻松地管理数据源。
      - 它使用数据快照（snapshot）来描述数据源的状态。
      - 当数据源发生变化时，只需要创建新的快照并应用到 UICollectionViewDiffableDataSource 上，它会自动计算出需要更新的单元格，并进行动画更新。
    example: |
      ```swift
      import SnapKit
      import UIKit

      class ViewController: UIViewController, UICollectionViewDelegate {

        enum Section: Int, CaseIterable {
          case first
          case second

          var title: String {
            switch self {
            case .first:
              return "First Section"
            case .second:
              return "Second Section"
            }
          }
        }

        class Item: NSObject {
          let id: UUID
          var title: String

          init(id: UUID, title: String) {
            self.id = id
            self.title = title
          }
        }

        var collectionView: UICollectionView! = nil
        var diffableDataSource: UICollectionViewDiffableDataSource<Section, Item>! = nil

        override func viewDidLoad() {
          super.viewDidLoad()

          title = "UICollectionViewDiffableDataSource"

          // 设置 CollectionView
          configureCollectionView()
          // 配置数据源
          configureDataSource()
          // 应用初始数据
          applyInitialSnapshot()

          // 添加操作按钮
          setupActionButtons()
        }

        // 配置 CollectionView
        private func configureCollectionView() {
          let layout = UICollectionViewFlowLayout()
          layout.itemSize = CGSize(width: UIScreen.main.bounds.width - 30, height: 100)
          layout.headerReferenceSize = CGSize(width: UIScreen.main.bounds.width, height: 50)

          collectionView = UICollectionView(frame: view.bounds, collectionViewLayout: layout)
          collectionView.backgroundColor = .systemBackground
          collectionView.register(FirstCell.self, forCellWithReuseIdentifier: "FirstCell")
          collectionView.register(SecondCell.self, forCellWithReuseIdentifier: "SecondCell")
          collectionView.register(CustomHeader.self, forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: "header")

          collectionView.delegate = self

          view.addSubview(collectionView)
        }

        // 配置数据源
        private func configureDataSource() {
          diffableDataSource = UICollectionViewDiffableDataSource<Section, Item>(collectionView: collectionView) {
            (collectionView, indexPath, item) -> UICollectionViewCell? in

            let section = Section.allCases[indexPath.section]

            switch section {
            case .first:
              let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "FirstCell", for: indexPath) as? FirstCell
              cell?.label.text = item.title
              return cell ?? UICollectionViewCell()

            case .second:
              let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "SecondCell", for: indexPath) as? SecondCell
              cell?.label.text = item.title
              return cell ?? UICollectionViewCell()
            }
          }

          // 配置 section 头部视图
          diffableDataSource.supplementaryViewProvider = { (collectionView, kind, indexPath) in
            guard kind == UICollectionView.elementKindSectionHeader else { return nil }
            let header = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: "header", for: indexPath) as? CustomHeader
            header?.label.text = Section.allCases[indexPath.section].title
            return header
          }
        }

        // 应用初始快照
        private func applyInitialSnapshot() {
          var snapshot = NSDiffableDataSourceSnapshot<Section, Item>()
          snapshot.appendSections([.first, .second])

          // 创建并添加初始数据
          let itemsFirstSection = (1...10).map { Item(id: UUID(), title: "First Section Item \($0)") }
          let itemsSecondSection = (1...10).map { Item(id: UUID(), title: "Second Section Item \($0)") }

          snapshot.appendItems(itemsFirstSection, toSection: .first)
          snapshot.appendItems(itemsSecondSection, toSection: .second)

          diffableDataSource.apply(snapshot, animatingDifferences: true)
        }

        // 设置操作按钮
        private func setupActionButtons() {
          let buttonStack = UIStackView()
          buttonStack.axis = .horizontal
          buttonStack.spacing = 10
          buttonStack.distribution = .fillEqually

          let insertButton = UIButton(type: .system)
          insertButton.setTitle("Insert", for: .normal)
          insertButton.addTarget(self, action: #selector(insertItem), for: .touchUpInside)

          let deleteButton = UIButton(type: .system)
          deleteButton.setTitle("Delete", for: .normal)
          deleteButton.addTarget(self, action: #selector(deleteItem), for: .touchUpInside)

          let moveButton = UIButton(type: .system)
          moveButton.setTitle("Move", for: .normal)
          moveButton.addTarget(self, action: #selector(moveItem), for: .touchUpInside)

          let updateButton = UIButton(type: .system)
          updateButton.setTitle("Update", for: .normal)
          updateButton.addTarget(self, action: #selector(updateItem), for: .touchUpInside)

          buttonStack.addArrangedSubview(insertButton)
          buttonStack.addArrangedSubview(deleteButton)
          buttonStack.addArrangedSubview(moveButton)
          buttonStack.addArrangedSubview(updateButton)

          let container = UIView()
          container.backgroundColor = .white
          container.addSubview(buttonStack)
          view.addSubview(container)

          container.snp.makeConstraints{ make in
            make.bottom.equalToSuperview()
            make.leading.equalToSuperview()
            make.trailing.equalToSuperview()
          }

          buttonStack.snp.makeConstraints { make in
            make.top.equalToSuperview().offset(10)
            make.bottom.equalToSuperview().offset(-34)
            make.leading.equalToSuperview().offset(15)
            make.trailing.equalToSuperview().offset(-15)
          }
        }

        // 插入新项
        @objc private func insertItem() {
          var snapshot = diffableDataSource.snapshot()
          let newItem = Item(id: UUID(), title: "New Item")
          snapshot.appendItems([newItem], toSection: .first)
          diffableDataSource.apply(snapshot, animatingDifferences: true)
        }

        // 删除项
        @objc private func deleteItem() {
          var snapshot = diffableDataSource.snapshot()
          let firstItems = snapshot.itemIdentifiers(inSection: Section.first)
          snapshot.deleteItems([firstItems[0]])
          diffableDataSource.apply(snapshot, animatingDifferences: true)
        }

        // 移动项
        @objc private func moveItem() {
          var snapshot = diffableDataSource.snapshot()
          let firstItems = snapshot.itemIdentifiers(inSection: Section.first)
          let firstItem = firstItems[0]
          let sencondItem = firstItems[1]
          snapshot.moveItem(firstItem, afterItem: sencondItem)
          diffableDataSource.apply(snapshot, animatingDifferences: true)
        }

        // 更新项
        @objc private func updateItem() {
          var snapshot = diffableDataSource.snapshot()
          let firstItems = snapshot.itemIdentifiers(inSection: Section.first)
          let firstItem = firstItems[0]
          firstItem.title = "1"
          snapshot.reloadItems([firstItem])
          diffableDataSource.apply(snapshot, animatingDifferences: true)
        }

        func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
          let section = Section.allCases[indexPath.section]
          let selectedItem = diffableDataSource.itemIdentifier(for: indexPath)

          if let item = selectedItem {
            print("Selected item in \(section.title): \(item.title), ID: \(item.id)")
          }
        }
      }

      // 自定义第一种单元格
      fileprivate class FirstCell: UICollectionViewCell {
        let label: UILabel = {
          let label = UILabel()
          label.textAlignment = .center
          label.textColor = .white
          return label
        }()

        override init(frame: CGRect) {
          super.init(frame: frame)
          contentView.addSubview(label)
          contentView.backgroundColor = .blue
          label.snp.makeConstraints { make in
            make.centerY.equalToSuperview()
            make.left.equalToSuperview().offset(15)
            make.right.equalToSuperview().offset(-15)
          }
        }

        required init?(coder: NSCoder) {
          super.init(coder: coder)
        }
      }

      // 自定义第二种单元格
      fileprivate class SecondCell: UICollectionViewCell {
        let label: UILabel = {
          let label = UILabel()
          label.textAlignment = .center
          label.textColor = .white
          return label
        }()

        override init(frame: CGRect) {
          super.init(frame: frame)
          contentView.addSubview(label)
          contentView.backgroundColor = .red
          label.snp.makeConstraints { make in
            make.centerY.equalToSuperview()
            make.left.equalToSuperview().offset(15)
            make.right.equalToSuperview().offset(-15)
          }
        }

        required init?(coder: NSCoder) {
          super.init(coder: coder)
        }
      }

      // 自定义头部视图
      fileprivate class CustomHeader: UICollectionReusableView {
        let label: UILabel = {
          let label = UILabel()
          label.textAlignment = .center
          label.textColor = .black
          label.font = UIFont.boldSystemFont(ofSize: 20)
          return label
        }()

        override init(frame: CGRect) {
          super.init(frame: frame)
          addSubview(label)
          label.snp.makeConstraints { make in
            make.edges.equalToSuperview().inset(10)
          }
        }

        required init?(coder: NSCoder) {
          super.init(coder: coder)
        }
      }
      ```
  - title: 自定义 UICollectionView 的布局
    description: |-
      可以通过继承 UICollectionViewLayout 类来实现自定义布局。
      - 需要重写以下方法：
          - `prepare()`: 准备布局信息。
          - `collectionViewContentSize`: 返回 CollectionView 的内容大小。
          - `layoutAttributesForElements(in: CGRect)`: 返回指定区域内所有单元格和装饰视图的布局属性。
      - 可以使用 UICollectionViewLayoutAttributes 类来创建和设置布局属性，例如位置、大小、透明度、变换等。
    example: |
      ```swift
      import UIKit

      class CustomCollectionViewLayout: UICollectionViewLayout {
          // ... 自定义布局属性 ...

          override func prepare() {
              super.prepare()
              // ... 计算布局信息 ...
          }

          override var collectionViewContentSize: CGSize {
              // ... 返回内容大小 ...
          }

          override func layoutAttributesForElements(in rect: CGRect) -> [UICollectionViewLayoutAttributes]? {
              var layoutAttributes = [UICollectionViewLayoutAttributes]()
              // ... 计算指定区域内所有元素的布局属性 ...
              return layoutAttributes
          }
      }
      ```
  - title: 实现瀑布流布局
    description: |-
      瀑布流布局是一种常见的自定义布局，它的特点是单元格的高度不固定，根据内容自适应高度，并按照列的方式排列。
      - 需要计算每个单元格的高度，并根据高度将单元格分配到不同的列中。
      - 可以使用 CHTCollectionViewWaterfallLayout 等第三方库来简化瀑布流布局的实现。
    example: |
      ```swift
      // 使用 CHTCollectionViewWaterfallLayout 实现瀑布流布局
      import CHTCollectionViewWaterfallLayout

      class ViewController: UIViewController, UICollectionViewDelegate, CHTCollectionViewDelegateWaterfallLayout {

          var collectionView: UICollectionView!
          // ... 其他属性和方法 ...

          override func viewDidLoad() {
              super.viewDidLoad()

              // ... 创建 Collection View ...

              // 设置瀑布流布局
              let layout = CHTCollectionViewWaterfallLayout()
              layout.columnCount = 2 // 设置列数
              layout.minimumColumnSpacing = 10 // 设置列间距
              layout.minimumInteritemSpacing = 10 // 设置行间距
              collectionView.collectionViewLayout = layout
              collectionView.delegate = self
          }

          // MARK: - CHTCollectionViewDelegateWaterfallLayout

          func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
              // ... 计算单元格大小 ...
          }
      }
      ```
  - title: 实现分组和分区
    description: |-
      UICollectionView 支持分组和分区，可以将单元格分组到不同的 section 中，每个 section 可以有自己的 header 和 footer。
      - 需要在数据源方法中返回 section 的数量、每个 section 中的单元格数量，以及 header 和 footer 的信息。
      - 可以使用 UICollectionView.elementKindSectionHeader 和 UICollectionView.elementKindSectionFooter 来注册 header 和 footer 的视图类。
    example: |
      ```swift
      import UIKit

      class ViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate {

          // ... 其他属性和方法 ...

          // MARK: - UICollectionViewDataSource

          func numberOfSections(in collectionView: UICollectionView) -> Int {
              return 2 // 返回 section 数量
          }

          func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
              // ... 返回每个 section 中的单元格数量 ...
          }

          func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
              // ... 配置和返回单元格 ...
          }

          func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
              if kind == UICollectionView.elementKindSectionHeader {
                  // ... 配置和返回 header 视图 ...
              } else if kind == UICollectionView.elementKindSectionFooter {
                  // ... 配置和返回 footer 视图 ...
              }
              return UICollectionReusableView()
          }
      }
      ```
  - title: 处理单元格的选择
    description: |-
      可以通过代理方法 `collectionView(_:didSelectItemAt:)` 来处理单元格的选中事件。
      - 可以通过 `collectionView.indexPathsForSelectedItems` 属性获取所有选中单元格的 indexPath。
      - 可以通过 `collectionView.allowsMultipleSelection` 属性设置是否允许多选。
      - 可以通过 `collectionView.selectItem(at:animated:scrollPosition:)` 方法选中指定单元格，并可以选择是否滚动到可见区域。
    example: |
      ```swift
      import UIKit

      class ViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate {

          // ... 其他属性和方法 ...

          // MARK: - UICollectionViewDelegate

          func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
              // ... 处理单元格选中事件 ...
          }
      }
      ```
  - title: 处理单元格的删除和移动
    description: |-
      可以通过代理方法 `collectionView(_:canMoveItemAt:)` 和 `collectionView(_:moveItemAt:to:)` 来处理单元格的移动事件。
      - 可以通过 `collectionView.beginInteractiveMovementForItem(at:)`、`collectionView.updateInteractiveMovementTargetPosition(_:)` 和 `collectionView.endInteractiveMovement()` 方法来实现单元格的交互式移动。
      - 可以通过数据源方法 `collectionView(_:canEditItemAt:)`、`collectionView(_:commit:forItemAt:)` 和 `collectionView(_:moveItemAt:to:)` 来处理单元格的删除和移动事件。
    example: |
      ```swift
      import UIKit

      class ViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate {

          // ... 其他属性和方法 ...

          // MARK: - UICollectionViewDataSource

          func collectionView(_ collectionView: UICollectionView, canMoveItemAt indexPath: IndexPath) -> Bool {
              // ... 返回是否可以移动单元格 ...
          }

          func collectionView(_ collectionView: UICollectionView, moveItemAt sourceIndexPath: IndexPath, to destinationIndexPath: IndexPath) {
              // ... 更新数据源 ...
          }
      }
      ```
  - title: 添加自定义动画
    description: |-
      可以通过 `collectionView.performBatchUpdates(_:completion:)` 方法来执行多个更新操作，并添加自定义动画。
      - 在 `performBatchUpdates(_:completion:)` 方法的闭包中，可以执行插入、删除、移动单元格等操作。
      - 可以使用 `UIView.animate(withDuration:animations:)` 方法来添加自定义动画。
    example: |
      ```swift
      import UIKit

      class ViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate {

          // ... 其他属性和方法 ...

          @IBAction func deleteItems() {
              // ... 删除数据源中的数据 ...

              // 执行批量更新，并添加动画
              collectionView.performBatchUpdates({
                  // 删除单元格
                  collectionView.deleteItems(at: [indexPath1, indexPath2])
              }, completion: { finished in
                  // 动画完成后执行的操作
              })
          }
      }
      ```
references:
  - title: UICollectionView | Apple Developer Documentation
    url: https://developer.apple.com/documentation/uikit/uicollectionview
  - title: Updating Collection Views Using Diffable Data Sources
    url: https://developer.apple.com/documentation/uikit/views_and_controls/collection_views/updating_collection_views_using_diffable_data_sources
  - title: Implementing Modern Collection Views
    url: https://developer.apple.com/documentation/uikit/views_and_controls/collection_views/implementing_modern_collection_views
  - title: Building High-Performance Lists and Collection Views
    url: https://developer.apple.com/documentation/uikit/uiimage/building_high-performance_lists_and_collection_views
  - title: Implementing Modern Collection Views
    url: https://developer.apple.com/documentation/uikit/views_and_controls/collection_views/implementing_modern_collection_views
  - title: Changing the Appearance of Selected and Highlighted Cells
    url: https://developer.apple.com/documentation/uikit/uicollectionviewdelegate/changing_the_appearance_of_selected_and_highlighted_cells
  - title: Selecting multiple items with a two-finger pan gesture
    url: https://developer.apple.com/documentation/uikit/uitableviewdelegate/selecting_multiple_items_with_a_two-finger_pan_gesture
  - title: Supporting Drag and Drop in Collection Views
    url: https://developer.apple.com/documentation/uikit/views_and_controls/collection_views/supporting_drag_and_drop_in_collection_views
  - title: Get started with UICollectionView | by Irem Karaoglu - Medium
    url: https://iremkaraoglu.medium.com/get-started-with-uicollectionview-3e744b78ed7f
