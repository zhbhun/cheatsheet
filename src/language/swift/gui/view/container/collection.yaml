id: collection
title: UICollectionView
query: Swift UICollectionView
comment: 详细介绍 Swift UICollectionView 的用法及
description: |
  UICollectionView 是 UIKit 中用于显示网格或自定义布局的强大工具，常用于构建图片展示、商品展示等场景。与 UITableView 类似，UICollectionView 通过数据源与委托管理展示的内容，但它更灵活，支持水平滚动、瀑布流布局和更复杂的网格。通过自定义布局和单元格样式，开发者可以实现丰富的界面。自 iOS 13 起，苹果引入了 `UICollectionViewDiffableDataSource` 和 `Compositional Layout`，进一步简化了数据管理和布局配置。
usage:
  - title: 创建 UICollectionView
    content: |
      在代码中创建 UICollectionView 通常需要指定一个布局（如 `UICollectionViewFlowLayout`），并通过设置数据源和委托来管理内容和交互。该示例展示如何在 `UIViewController` 中创建 UICollectionView。
    example: |
      ```swift
      import UIKit

      class ViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate {
          var collectionView: UICollectionView!

          override func viewDidLoad() {
              super.viewDidLoad()

              // 定义布局
              let layout = UICollectionViewFlowLayout()
              layout.itemSize = CGSize(width: 100, height: 100)

              // 创建 UICollectionView 并设置布局
              collectionView = UICollectionView(frame: self.view.bounds, collectionViewLayout: layout)

              // 设置数据源和委托
              collectionView.dataSource = self
              collectionView.delegate = self

              // 注册单元格类
              collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: "cell")

              // 添加到视图层次结构中
              self.view.addSubview(collectionView)
          }

          // UICollectionViewDataSource 必须实现的方法
          func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
              return 20
          }

          func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
              let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "cell", for: indexPath)
              cell.backgroundColor = .blue
              return cell
          }
      }
      ```

  - title: 配置数据源
    content: |
      数据源通过实现 `UICollectionViewDataSource` 协议进行配置，主要负责提供数据的数量和每个单元格的内容。 `UICollectionViewDataSource` 的两个关键方法是 `numberOfItemsInSection` 和 `cellForItemAt`，用来告诉 UICollectionView 显示多少个单元格以及如何配置每个单元格。
    example: |
      ```swift
      class ViewController: UIViewController, UICollectionViewDataSource {
          // 返回指定 section 中的项目数
          func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
              return 100
          }

          // 返回每个位置的单元格
          func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
              let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "cell", for: indexPath)
              cell.backgroundColor = .red
              return cell
          }
      }
      ```

  - title: 处理单元格选择
    content: |
      `UICollectionViewDelegate` 协议中的 `didSelectItemAt` 方法用于处理用户的交互，如点击某个项目后的响应。在该方法中，你可以处理事件或导航到新的界面。
    example: |
      ```swift
      class ViewController: UIViewController, UICollectionViewDelegate {
          func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
              print("选中了项目 \(indexPath.row)")
          }
      }
      ```

  - title: 自定义 UICollectionViewCell
    content: |
      通过继承 `UICollectionViewCell` 并添加自定义子视图（如图片和标签），可以自定义每个单元格的外观和布局。你还需要在代码中注册自定义单元格类。
    example: |
      ```swift
      class CustomCell: UICollectionViewCell {
          let imageView = UIImageView()
          let label = UILabel()

          override init(frame: CGRect) {
              super.init(frame: frame)
              imageView.frame = CGRect(x: 10, y: 10, width: 80, height: 80)
              label.frame = CGRect(x: 10, y: 90, width: 80, height: 20)
              contentView.addSubview(imageView)
              contentView.addSubview(label)
          }

          required init?(coder: NSCoder) {
              fatalError("init(coder:) has not been implemented")
          }
      }

      // 注册并使用自定义单元格
      override func viewDidLoad() {
          super.viewDidLoad()
          collectionView.register(CustomCell.self, forCellWithReuseIdentifier: "CustomCell")
      }
      ```

  - title: 使用 Diffable Data Source
    content: |
      `UICollectionViewDiffableDataSource` 提供了一种更高效的数据管理方式，尤其适用于需要动态插入、删除和更新数据的场景。
    example: |
      ```swift
      class ViewController: UIViewController {
          var collectionView: UICollectionView!
          var dataSource: UICollectionViewDiffableDataSource<Section, Item>!

          override func viewDidLoad() {
              super.viewDidLoad()
              // 创建布局和 collectionView
              let layout = UICollectionViewFlowLayout()
              collectionView = UICollectionView(frame: view.bounds, collectionViewLayout: layout)
              view.addSubview(collectionView)

              // 配置 Diffable Data Source
              dataSource = UICollectionViewDiffableDataSource<Section, Item>(collectionView: collectionView) { (collectionView, indexPath, item) -> UICollectionViewCell? in
                  let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "cell", for: indexPath)
                  cell.backgroundColor = .yellow
                  return cell
              }

              // 创建并应用快照
              var snapshot = NSDiffableDataSourceSnapshot<Section, Item>()
              snapshot.appendSections([.main])
              snapshot.appendItems([Item(id: 1), Item(id: 2)])
              dataSource.apply(snapshot, animatingDifferences: true)
          }
      }

      struct Item: Hashable {
          let id: Int
      }

      enum Section {
          case main
      }
      ```

  - title: 自定义布局 (Compositional Layout)
    content: |
      自 iOS 13 引入 `UICollectionViewCompositionalLayout` 后，可以通过更灵活的布局系统，使用分数、组和区块的组合来创建响应式布局，适用于各种复杂的 UI 设计。
    example: |
      ```swift
      let itemSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1), heightDimension: .fractionalHeight(1))
      let item = NSCollectionLayoutItem(layoutSize: itemSize)

      let groupSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1), heightDimension: .fractionalWidth(0.5))
      let group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitem: item, count: 2)

      let section = NSCollectionLayoutSection(group: group)
      let layout = UICollectionViewCompositionalLayout(section: section)
      collectionView.setCollectionViewLayout(layout, animated: true)
      ```
references:
  - title: "UICollectionView Tutorial: Getting Started"
    url: https://www.kodeco.com/2502501-uicollectionview-tutorial-getting-started
  - title: UICollectionView Programmatically in Swift
    url: https://www.appsdeveloperblog.com/create-uicollectionview-in-swift-programmatically/
  - title: Building Modern Collection Views in Swift
    url: https://www.swiftbysundell.com/articles/building-modern-collection-views-in-swift/
  - title: Designing UICollectionView Cells in Swift
    url: https://www.hackingwithswift.com/read/16/overview-of-uicollectionview
