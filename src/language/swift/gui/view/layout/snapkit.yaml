id: snapkit
title: SnapKit
query: Swift SnapKit
comment: SnapKit 是 Swift 中常用的 Auto Layout 第三方库，用于简化布局代码，使其更加简洁和可读。
description: SnapKit 是 Swift 中常用的 Auto Layout 第三方库，用于简化布局代码，使其更加简洁和可读。
usage:
  - title: 安装 SnapKit
    description: 可以通过 CocoaPods 或 Swift Package Manager 将 SnapKit 集成到项目中。
    example: |
      **CocoaPods**
      ```ruby
      pod 'SnapKit'
      ```
      **Swift Package Manager**
      在 Xcode 中，选择 File > Swift Packages > Add Package Dependency，然后输入 SnapKit 的仓库地址：`https://github.com/SnapKit/SnapKit.git`。
  - title: 导入 SnapKit
    description: 在需要使用 SnapKit 的 Swift 文件中导入 SnapKit 库。
    example: |
      ```swift
      import SnapKit
      ```
  - title: 使用 makeConstraints 方法添加约束
    description: |
      SnapKit 使用 `makeConstraints` 方法为视图添加约束。`makeConstraints` 方法接受一个闭包作为参数，在闭包中可以使用 `make` 对象来定义约束。

      **语法：**
      ```swift
      view.snp.makeConstraints { make in
          // 添加约束
      }
      ```
    example: |
      ```swift
      let box = UIView()
      view.addSubview(box)

      box.snp.makeConstraints { make in
          make.top.equalTo(view.safeAreaLayoutGuide.snp.top).offset(20)
          make.left.equalToSuperview().offset(20)
          make.width.equalTo(100)
          make.height.equalTo(100)
      }
      ```
      这段代码将 `box` 视图添加到了 `view` 视图上，并设置了 `box` 距离 `view` 顶部安全区域 20 个点，距离左边 20 个点，宽度和高度都为 100 个点。
  - title: 使用 equalTo、offset 和 inset 设置约束关系
    description: |
      可以使用 `equalTo`、`offset` 和 `inset` 方法设置约束关系。
      - `equalTo`: 设置两个视图之间的相等关系。
      - `offset`: 添加偏移量。
      - `inset`: 设置内边距。
    example: |
      ```swift
      box.snp.makeConstraints { make in
          // 设置顶部约束，距离父视图顶部安全区域 20 个点
          make.top.equalTo(view.safeAreaLayoutGuide.snp.top).offset(20)
          // 设置左边约束，距离父视图左边 20 个点
          make.left.equalToSuperview().offset(20)
          // 设置右边约束，距离父视图右边 20 个点
          make.right.equalToSuperview().inset(20)
          // 设置底部约束，距离父视图底部安全区域 20 个点
          make.bottom.equalTo(view.safeAreaLayoutGuide.snp.bottom).inset(20)
      }
      ```
  - title: 设置视图尺寸
    description: 可以使用 `width` 和 `height` 属性设置视图的宽度和高度。
    example: |
      ```swift
      box.snp.makeConstraints { make in
          make.width.equalTo(100)
          make.height.equalTo(50)
      }
      ```
  - title: 设置视图居中
    description: 可以使用 `centerX` 和 `centerY` 属性设置视图在父视图中的水平或垂直居中。
    example: |
      ```swift
      box.snp.makeConstraints { make in
          make.centerX.equalToSuperview()
          make.centerY.equalToSuperview()
      }
      ```
  - title: 设置视图之间的间距
    description: 可以使用 `top`、`left`、`bottom`、`right` 属性设置视图之间的间距。
    example: |
      ```swift
      let box1 = UIView()
      view.addSubview(box1)
      box1.backgroundColor = .red
      box1.snp.makeConstraints { make in
          make.top.equalToSuperview().offset(100)
          make.left.equalToSuperview().offset(20)
          make.width.equalTo(100)
          make.height.equalTo(100)
      }

      let box2 = UIView()
      view.addSubview(box2)
      box2.backgroundColor = .green
      box2.snp.makeConstraints { make in
          make.top.equalTo(box1.snp.bottom).offset(20) // box2 距离 box1 底部 20 个点
          make.left.equalToSuperview().offset(20)
          make.width.equalTo(100)
          make.height.equalTo(100)
      }
      ```
  - title: 设置约束优先级
    description: 可以使用 `priority` 方法设置约束的优先级。优先级越高，约束越容易被满足。
    example: |
      ```swift
      box.snp.makeConstraints { make in
          make.top.equalToSuperview().offset(20).priority(.high)
          make.left.equalToSuperview().offset(20).priority(.medium)
          make.right.equalToSuperview().inset(20).priority(.low)
      }
      ```
  - title: 更新约束
    description: |
      可以使用 `updateConstraints` 方法更新已存在的约束。

      **语法：**
      ```swift
      view.snp.updateConstraints { make in
          // 更新约束
      }
      ```
    example: |
      ```swift
      box.snp.updateConstraints { make in
          make.width.equalTo(200) // 将宽度更新为 200
      }
      ```
  - title: 移除约束
    description: |
      可以使用 `remakeConstraints` 方法移除所有已存在的约束，并添加新的约束。

      **语法：**
      ```swift
      view.snp.remakeConstraints { make in
          // 添加新的约束
      }
      ```
    example: |
      ```swift
      box.snp.remakeConstraints { make in
          make.center.equalToSuperview() // 将 box 约束到父视图中心
          make.width.height.equalTo(50)  // 设置 box 的宽度和高度为 50
      }
      ```
      这段代码会移除 `box` 之前的所有约束，并添加新的约束，使其居于父视图中心，且宽度和高度都为 50。
  - title: 使用 edges 属性设置边缘约束
    description: 可以使用 `edges` 属性一次性设置视图的上下左右四个边缘约束。
    example: |
      ```swift
      box.snp.makeConstraints { make in
          make.edges.equalToSuperview().inset(20) // 距离父视图四边 20 个点
      }
      ```
  - title: 使用 size 属性设置尺寸约束
    description: 可以使用 `size` 属性一次性设置视图的宽度和高度约束。
    example: |
      ```swift
      box.snp.makeConstraints { make in
          make.size.equalTo(CGSize(width: 100, height: 50))
      }
      ```
  - title: 使用 center 属性设置中心点约束
    description: 可以使用 `center` 属性一次性设置视图的水平和垂直居中约束。
    example: |
      ```swift
      box.snp.makeConstraints { make in
          make.center.equalToSuperview()
      }
references:
  - title: 'SnapKit/SnapKit: A Swift Autolayout DSL for iOS & OS X'
    url: https://github.com/SnapKit/SnapKit
  - title: SnapKit for iOS - Next Level Swift
    url: https://medium.nextlevelswift.com/snapkit-for-ios-dca2dca859dc
  - title: What is SnapKit and How to use it? (with Brief Descriptions)
    url: https://medium.com/@burrakerden/what-is-snapkit-and-how-to-use-it-with-brief-descriptions-d6af19b3c4bc
