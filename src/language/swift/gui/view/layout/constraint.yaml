id: constraint
title: Auto Layout
query: UIKit Auto Layout by NSLayoutConstraint
comment: 详细介绍 UIKit Auto Layout 的所有特性和用法
description: Auto Layout 是 Apple 平台上用于构建动态和自适应用户界面的强大布局系统。它使用约束来定义 UI 元素之间的关系，使布局能够响应屏幕尺寸、方向和设备的变化。本教程将深入研究 Auto Layout 的核心概念和用法，并提供实用的示例来演示如何在 iOS 应用程序中创建自适应和灵活的 UI。
usage:
  - title: 理解约束
    description: 约束是 Auto Layout 的基础。它们是定义两个 UI 元素之间关系的规则，例如它们的相对位置、大小或对齐方式。约束使用线性方程来描述这些关系，确保布局在不同条件下都能保持一致。
    example: |
      ```swift
      // 创建一个约束，将视图的宽度设置为其父视图宽度的一半
      let constraint = view1.widthAnchor.constraint(equalTo: view2.widthAnchor, multiplier: 0.5)
      constraint.isActive = true
      ```
  - title: 创建约束
    description: 可以使用 Interface Builder 或以编程方式创建约束。Interface Builder 提供了一个可视化界面来定义约束，而以编程方式创建约束允许更动态和灵活的布局。
    example: |
      ```swift
      // 以编程方式创建约束
      let horizontalConstraint = NSLayoutConstraint(item: view1, attribute: .leading, relatedBy: .equal, toItem: view2, attribute: .trailing, multiplier: 1.0, constant: 20.0)
      horizontalConstraint.isActive = true // 激活约束

      // 固定大小
      let myView = UIView()
      myView.translatesAutoresizingMaskIntoConstraints = false
      superview.addSubview(myView)
      // 本示例设置了视图 `myView` 的宽度为 200 点，高度为 150 点。
      NSLayoutConstraint.activate([
          myView.widthAnchor.constraint(equalToConstant: 200),
          myView.heightAnchor.constraint(equalToConstant: 150)
      ])

      // 设置顶部和底部约束
      let myView = UIView()
      myView.translatesAutoresizingMaskIntoConstraints = false
      superview.addSubview(myView)
      NSLayoutConstraint.activate([
          myView.topAnchor.constraint(equalTo: superview.topAnchor, constant: 20),
          myView.bottomAnchor.constraint(equalTo: superview.bottomAnchor, constant: -20)
      ])

      // 设置左右边距
      let myView = UIView()
      myView.translatesAutoresizingMaskIntoConstraints = false
      superview.addSubview(myView)
      NSLayoutConstraint.activate([
          myView.leadingAnchor.constraint(equalTo: superview.leadingAnchor, constant: 16),
          myView.trailingAnchor.constraint(equalTo: superview.trailingAnchor, constant: -16)
      ])
      ```
  - title: 约束属性
    description: |-
      约束具有属性来控制它们的行为，例如：
      - `isActive`: 指示约束是否生效并影响布局
      - `priority`: 确定在解决布局冲突时约束的重要性
      - `constant`: 表示添加到约束方程中的常数值
      - `multiplier`: 表示应用于约束方程中第二个属性的乘数
    example: |
      ```swift
      // 创建一个优先级较低的约束
      let constraint = view1.topAnchor.constraint(equalTo: view2.bottomAnchor, constant: 20.0)
      constraint.priority = .defaultHigh

      // 创建一个具有乘数的约束
      let constraint = view1.widthAnchor.constraint(equalTo: view2.widthAnchor, multiplier: 0.75)
      ```
  - title: 内容拥抱和压缩阻力
    description: 内容拥抱和压缩阻力是影响 Auto Layout 如何根据其内容调整视图大小的属性。内容拥抱优先级定义视图抵抗大于其固有内容大小的程度，而内容压缩阻力优先级定义视图抵抗小于其固有内容大小的程度。
    example: |
      ```swift
      // 设置标签的内容拥抱优先级
      label.setContentHuggingPriority(.required, for: .vertical)

      // 设置文本字段的内容压缩阻力优先级
      textField.setContentCompressionResistancePriority(.defaultHigh, for: .horizontal)
      ```
  - title: 使用基线对齐
    content: |
      通过 `firstBaselineAnchor` 和 `lastBaselineAnchor` 可以对齐文本内容的基线，特别适用于对齐多个文本元素。
    example: |
      ```swift
      // 本示例展示了如何将两个 `UILabel` 的首行基线对齐。
      let label1 = UILabel()
      let label2 = UILabel()
      label1.translatesAutoresizingMaskIntoConstraints = false
      label2.translatesAutoresizingMaskIntoConstraints = false
      superview.addSubview(label1)
      superview.addSubview(label2)

      // 基线对齐
      NSLayoutConstraint.activate([
          label1.firstBaselineAnchor.constraint(equalTo: label2.firstBaselineAnchor)
      ])
      ```
  - title: 居中对齐视图
    content: |
      使用 `centerXAnchor` 和 `centerYAnchor` 来将视图在父视图中水平和垂直居中。
    example: |
      ```swift
      // 这段代码将 `myView` 水平和垂直居中，并将其设置为 100x100 大小的正方形。
      let myView = UIView()
      myView.translatesAutoresizingMaskIntoConstraints = false
      superview.addSubview(myView)

      // 居中约束
      NSLayoutConstraint.activate([
          myView.centerXAnchor.constraint(equalTo: superview.centerXAnchor),
          myView.centerYAnchor.constraint(equalTo: superview.centerYAnchor),
          myView.widthAnchor.constraint(equalToConstant: 100),
          myView.heightAnchor.constraint(equalTo: myView.widthAnchor) // 设置为正方形
      ])
      ```
  - title: 使用比例约束
    content: |
      使用宽高比约束让视图保持固定比例，例如将视图的高度设置为宽度的两倍。
    example: |
      ```swift
      let myView = UIView()
      myView.translatesAutoresizingMaskIntoConstraints = false
      superview.addSubview(myView)

      // 设置宽高比为 2:1
      NSLayoutConstraint.activate([
          myView.widthAnchor.constraint(equalToConstant: 100),
          myView.heightAnchor.constraint(equalTo: myView.widthAnchor, multiplier: 2.0)
      ])
      // 这段代码将 `myView` 的高度设置为其宽度的两倍，且宽度固定为 100 点。
      ```
  - title: 使用 Safe Area
    content: |
      使用 `safeAreaLayoutGuide` 可以确保视图不会被系统元素（如状态栏、导航栏）遮挡。
    example: |
      ```swift
      // 本示例确保视图与父视图的安全区域对齐，不会被系统栏遮挡。
      let myView = UIView()
      myView.translatesAutoresizingMaskIntoConstraints = false
      superview.addSubview(myView)

      // 使用 Safe Area
      NSLayoutConstraint.activate([
          myView.topAnchor.constraint(equalTo: superview.safeAreaLayoutGuide.topAnchor),
          myView.bottomAnchor.constraint(equalTo: superview.safeAreaLayoutGuide.bottomAnchor)
      ])
      ```
  - title: 读取内容区域约束
    content: |
      使用 `readableContentGuide` 约束文本视图的宽度，确保文本在界面中保持良好的可读性。
    example: |
      ```swift
      // 本示例展示了如何使用 `readableContentGuide` 确保文本的内容区域保持适当的宽度，避免过于拥挤或分散。
      let label = UILabel()
      label.translatesAutoresizingMaskIntoConstraints = false
      superview.addSubview(label)

      NSLayoutConstraint.activate([
          label.leadingAnchor.constraint(equalTo: superview.readableContentGuide.leadingAnchor),
          label.trailingAnchor.constraint(equalTo: superview.readableContentGuide.trailingAnchor)
      ])
      ```
  - title: 使用布局边距
    content: |
      使用 `layoutMarginsGuide` 可以确保视图的内容遵循父视图的内边距，避免紧贴视图边缘。
    example: |
      ```swift
      let myView = UIView()
      myView.translatesAutoresizingMaskIntoConstraints = false
      superview.addSubview(myView)

      // 使用布局边距
      NSLayoutConstraint.activate([
          myView.leadingAnchor.constraint(equalTo: superview.layoutMarginsGuide.leadingAnchor),
          myView.trailingAnchor.constraint(equalTo: superview.layoutMarginsGuide.trailingAnchor)
      ])
      ```
      本示例展示了如何通过 `layoutMarginsGuide` 设置视图的左右边距。
  - title: 布局指南
    description: 布局指南为定义视图布局提供了灵活的方式。它们可用于创建自定义边距、间距和对齐方式。
    example: |
      ```swift
      // 创建一个布局指南，其顶部距离视图顶部 20 个点
      let layoutGuide = UILayoutGuide()
      view.addLayoutGuide(layoutGuide)

      let constraint = layoutGuide.topAnchor.constraint(equalTo: view.topAnchor, constant: 20.0)
      constraint.isActive = true
      ```
  - title: 动画
    description: Auto Layout 与动画完美配合。通过更改约束并在动画块内调用 `layoutIfNeeded()`，可以创建平滑的过渡和动画。
    example: |
      ```swift
      // 为视图的宽度创建一个约束
      let widthConstraint = view.widthAnchor.constraint(equalToConstant: 100.0)
      widthConstraint.isActive = true

      // 创建一个动画以更改宽度
      UIView.animate(withDuration: 0.5) {
          widthConstraint.constant = 200.0
          self.view.layoutIfNeeded()
      }
      ```
  - title: 调试
    description: 当 Auto Layout 遇到冲突或不明确的约束时，它会将错误或警告打印到控制台。了解如何解释这些消息对于调试布局问题至关重要。
    example: |
      ```
      // 示例错误消息
      Unable to simultaneously satisfy constraints.
      Probably at least one of the constraints in the following list is one you don't want.
      ```
  - title: 常见布局示例
    description: |
      以下是一些使用 Auto Layout 创建常见布局的示例：
      - 居中视图
      - 创建具有固定间距的视图堆栈
      - 创建一个网格视图
    example: |
      ```swift
      // 居中视图
      view.centerXAnchor.constraint(equalTo: view.superview!.centerXAnchor).isActive = true
      view.centerYAnchor.constraint(equalTo: view.superview!.centerYAnchor).isActive = true

      // 创建具有固定间距的视图堆栈
      let stackView = UIStackView()
      stackView.axis = .vertical
      stackView.spacing = 8.0

      // 添加视图到堆栈视图
      stackView.addArrangedSubview(view1)
      stackView.addArrangedSubview(view2)

      // 创建一个网格视图
      let gridView = UIView()

      // 添加子视图到网格视图
      for i in 0..<4 {
          let view = UIView()
          gridView.addSubview(view)

          // 设置约束以创建网格布局
          view.translatesAutoresizingMaskIntoConstraints = false
          view.widthAnchor.constraint(equalTo: gridView.widthAnchor, multiplier: 0.5).isActive = true
          view.heightAnchor.constraint(equalTo: gridView.heightAnchor, multiplier: 0.5).isActive = true

          if i < 2 {
              view.topAnchor.constraint(equalTo: gridView.topAnchor).isActive = true
          } else {
              view.topAnchor.constraint(equalTo: gridView.centerYAnchor).isActive = true
          }

          if i % 2 == 0 {
              view.leadingAnchor.constraint(equalTo: gridView.leadingAnchor).isActive = true
          } else {
              view.leadingAnchor.constraint(equalTo: gridView.centerXAnchor).isActive = true
          }
      }
      ```
references:
  - title: NSLayoutConstraint | Apple Developer Documentation
    url: https://developer.apple.com/documentation/uikit/nslayoutconstraint
  - title: Auto Layout in iOS UIKit | by Ajaya Mati - Medium
    url: https://ajayamati.medium.com/auto-layout-in-ios-uikit-524b95671234
  - title: 'Back to Basics: UIKit Constraint and Auto Layout'
    url: https://alvinmatthew.medium.com/back-to-basics-uikit-constraint-and-auto-layout-2141efb89f43
