id: linear
title: UIStackView
query: Swift UIStackView
comment: 详细介绍 Swift 中 `UIStackView` 的使用，包括创建、添加和移除视图、设置对齐和分布、调整间距等操作。
description: UIStackView 是 iOS 9.0+ 中引入的一种用于简化布局的视图容器，可以沿水平或垂直方向排列视图。
usage:
  - title: 创建 UIStackView
    description: 可以通过代码或 Interface Builder 创建 UIStackView。在代码中，可以使用 `UIStackView(arrangedSubviews:)` 初始化方法创建，并将要排列的视图作为参数传入。
    example: |
      ```swift
      import UIKit

      class MyViewController: UIViewController {

          override func viewDidLoad() {
              super.viewDidLoad()

              // 创建三个要排列的视图
              let label1 = UILabel()
              label1.text = "Label 1"
              let label2 = UILabel()
              label2.text = "Label 2"
              let label3 = UILabel()
              label3.text = "Label 3"

              // 使用这三个视图创建 UIStackView
              let stackView = UIStackView(arrangedSubviews: [label1, label2, label3])

              // 设置 UIStackView 的属性
              stackView.axis = .horizontal
              stackView.distribution = .fillEqually
              stackView.alignment = .center
              stackView.spacing = 10

              // 将 UIStackView 添加到视图层次结构中
              view.addSubview(stackView)

              // 设置 UIStackView 的约束
              stackView.translatesAutoresizingMaskIntoConstraints = false
              stackView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20).isActive = true
              stackView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20).isActive = true
              stackView.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true
          }
      }
      ```
  - title: 添加和移除视图
    description: 可以使用 `addArrangedSubview(_:)` 方法将视图添加到 UIStackView，并使用 `removeArrangedSubview(_:)` 方法移除视图。`arrangedSubviews` 属性存储了 UIStackView 中排列的所有视图。
    example: |
      ```swift
      // 添加视图
      stackView.addArrangedSubview(label4)

      // 移除视图
      stackView.removeArrangedSubview(label2)
      ```
  - title: 设置对齐方式
    description: '`alignment` 属性控制 UIStackView 中视图的对齐方式。可以设置为以下值之一：`fill`, `leading`, `trailing`, `center`, `firstBaseline`, `lastBaseline`。'
    example: |
      ```swift
      // 设置对齐方式为顶部对齐
      stackView.alignment = .top
      ```
  - title: 设置分布方式
    description: ｜
      `distribution` 属性控制 UIStackView 如何沿其轴线分布其排列的视图。可以设置为以下值之一：

      - `.fill`：所有子视图将压缩或扩展以填充 Stack View 的空间。
      - `.fillEqually`：子视图均分空间，无论其内容大小。
      - `.fillProportionally`：子视图按其固有大小的比例分配空间。
      - `.equalSpacing`：子视图之间的间距相等。
      - `.equalCentering`：子视图的中心点间距相等。
    example: |
      ```swift
      // 设置分布方式为等间距分布
      stackView.distribution = .equalSpacing
      ```
  - title: 调整间距
    description: 可以使用 `spacing` 属性设置排列的视图之间的间距。可以使用 `setCustomSpacing(_:after:)` 方法设置特定视图之后的自定义间距。
    example: |
      ```swift
      // 设置默认间距
      stackView.spacing = 20

      // 设置 label1 之后的自定义间距
      stackView.setCustomSpacing(30, after: label1)
      ```
  - title: 隐藏视图
    description: 可以设置排列的视图的 `isHidden` 属性来隐藏它们。UIStackView 会自动调整其布局以适应隐藏的视图。
    example: |
      ```swift
      // 隐藏 label3
      label3.isHidden = true
      ```
  - title: 嵌套 UIStackView
    description: 可以嵌套 UIStackView 来创建更复杂的布局。只需将一个 UIStackView 添加为另一个 UIStackView 的排列视图即可。
    example: |
      ```swift
      // 创建一个嵌套的 UIStackView
      let nestedStackView = UIStackView(arrangedSubviews: [label4, label5])
      nestedStackView.axis = .vertical

      // 将嵌套的 UIStackView 添加到主 UIStackView
      stackView.addArrangedSubview(nestedStackView)
      ```
references:
  - title: UIStackView | Apple Developer Documentation
    url: https://developer.apple.com/documentation/uikit/uistackview
  - title: UIStackView and Auto Layout
    url: https://medium.com/compass-true-north/uistackview-and-auto-layout-b16fd2c026c0
  - title: UIStackView 入坑指南
    url: https://juejin.cn/post/6844903752227373064
