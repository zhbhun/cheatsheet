id: view-property-animator
title: UIViewPropertyAnimator
query: UIKit UIViewPropertyAnimator
comment: 尽量详尽的演示不同属性和场景用法
description: '`UIViewPropertyAnimator` 是 iOS 10 引入的一种基于闭包的动画类，用于创建可中断、可擦洗和可反转的视图动画。它允许你动态修改动画的执行，例如暂停、继续、反转和改变动画进度等。'
usage:
  - title: 创建基础动画
    description: 使用 `UIViewPropertyAnimator` 创建一个简单的动画，例如将视图从一个位置移动到另一个位置。
    example: |
      ```swift
      // 创建一个 UIViewPropertyAnimator 对象，指定动画的持续时间、动画曲线和动画块。
      let animator = UIViewPropertyAnimator(duration: 1.0, curve: .easeInOut) {
          // 在动画块中修改视图的属性，例如改变视图的位置。
          view.center.x = view.superview!.bounds.midX + 100
      }
      // 启动动画。
      animator.startAnimation()
      ```
  - title: 暂停和继续动画
    description: 使用 `pauseAnimation()` 方法暂停动画，使用 `continueAnimation(withTimingParameters:durationFactor:)` 方法继续动画。
    example: |
      ```swift
      // 暂停动画
      animator.pauseAnimation()

      // 继续动画
      animator.continueAnimation(withTimingParameters: nil, durationFactor: 1.0)
      ```
  - title: 停止动画
    description: 使用 `stopAnimation()` 方法可以停止动画，可以选择是否完成动画。
    example: |
      ```swift
      // 立即停止动画，并停留在当前位置。
      animator.stopAnimation(false)

      // 停止动画，并完成动画，将视图移动到最终状态。
      animator.stopAnimation(true)
      ```
  - title: 反转动画
    description: 使用 `isReversed` 属性可以反转动画的方向。
    example: |
      ```swift
      // 反转动画方向。
      animator.isReversed = true
      ```
  - title: 改变动画进度
    description: 使用 `fractionComplete` 属性可以获取或设置动画的完成进度，取值范围为 0.0 到 1.0。
    example: |
      ```swift
      // 将动画进度设置为 50%。
      animator.fractionComplete = 0.5
      ```
  - title: 添加动画完成回调
    description: 使用 `addCompletion()` 方法可以添加动画完成回调，以便在动画完成时执行一些操作。
    example: |
      ```swift
      // 添加动画完成回调。
      animator.addCompletion { position in
          // 在动画完成时打印动画的最终位置。
          print("Animation completed with position: \(position.rawValue)")
      }
      ```
  - title: 创建可交互动画
    description: 使用 `fractionComplete` 属性和手势识别器，可以创建可与用户交互的动画，例如拖动手势控制动画进度。
    example: |
      ```swift
      // 创建一个 UIPanGestureRecognizer 对象。
      let panGesture = UIPanGestureRecognizer(target: self, action: #selector(handlePanGesture(_:)))
      // 将手势识别器添加到视图中。
      view.addGestureRecognizer(panGesture)

      // 处理平移手势。
      @objc func handlePanGesture(_ gesture: UIPanGestureRecognizer) {
          // 计算动画进度。
          let translation = gesture.translation(in: view)
          let progress = translation.x / view.bounds.width

          // 更新动画进度。
          animator.fractionComplete = progress
      }
      ```
  - title: 添加多个动画块
    description: 使用 `addAnimations()` 方法可以添加多个动画块，这些动画块将按顺序执行。
    example: |
      ```swift
      // 创建一个 UIViewPropertyAnimator 对象。
      let animator = UIViewPropertyAnimator(duration: 2.0, curve: .easeInOut) {
          // 添加第一个动画块。
          UIView.animate(withDuration: 1.0) {
              view.center.x = view.superview!.bounds.midX + 100
          }

          // 添加第二个动画块。
          UIView.animate(withDuration: 1.0) {
              view.transform = CGAffineTransform(rotationAngle: .pi / 2)
          }
      }
      // 启动动画。
      animator.startAnimation()
      ```
  - title: 使用 spring 动画
    description: 使用 `init(duration:dampingRatio:animations:)` 方法可以创建带有弹簧效果的动画。
    example: |
      ```swift
      // 创建一个带有弹簧效果的 UIViewPropertyAnimator 对象。
      let animator = UIViewPropertyAnimator(duration: 1.0, dampingRatio: 0.5) {
          view.center.x = view.superview!.bounds.midX + 100
      }
      // 启动动画。
      animator.startAnimation()
      ```
  - title: 使用关键帧动画
    description: 使用 `addKeyframe(withRelativeStartTime:relativeDuration:animations:)` 方法可以创建关键帧动画。
    example: |
      ```swift
      // 创建一个 UIViewPropertyAnimator 对象。
      let animator = UIViewPropertyAnimator(duration: 2.0, curve: .linear) {
          // 添加第一个关键帧。
          animator.addAnimations {
              view.center.x = view.superview!.bounds.midX + 100
          }, delayFactor: 0.0

          // 添加第二个关键帧。
          animator.addAnimations {
              view.transform = CGAffineTransform(rotationAngle: .pi / 2)
          }, delayFactor: 0.5

          // 添加第三个关键帧。
          animator.addAnimations {
              view.center.y = view.superview!.bounds.midY + 100
          }, delayFactor: 1.0
      }
      // 启动动画。
      animator.startAnimation()
      ```
references:
  - title: UIViewPropertyAnimator | Apple Developer Documentation
    url: https://developer.apple.com/documentation/uikit/uiviewpropertyanimator
  - title: Building Better iOS App Animations | by Nathan Gitter
    url: https://medium.com/swiftkickmobile/building-better-ios-app-animations-swift-uiviewpropertyanimator-ca05728b1fa4
  - title: How to animate views using UIViewPropertyAnimator
    url: https://www.hackingwithswift.com/example-code/uikit/how-to-animate-views-using-uiviewpropertyanimator
