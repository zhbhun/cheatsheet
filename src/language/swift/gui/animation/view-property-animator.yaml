id: view-property-animator
title: ViewPropertyAnimator
query: Android ViewPropertyAnimator
comment: 尽量详尽的演示不同属性和场景用法
description: "ViewPropertyAnimator 是 Android 中用于简化视图属性动画的工具，提供了更高效和易用的方式来实现动画效果。它可以处理多个属性如透明度、位置、缩放等，适合在 UI 交互中使用。"
usage:
  - title: 透明度动画
    content: 使用 alpha() 方法设置视图的透明度。
    example: |
      ```kotlin
      // 使按钮透明度减小到 0.5
      button.animate().alpha(0.5f).setDuration(300).start() // 持续 300 毫秒
      ```

  - title: 位移动画
    content: 使用 translationX() 和 translationY() 方法进行视图的平移。
    example: |
      ```kotlin
      // 将按钮向右移动 100 像素
      button.animate().translationX(100f).setDuration(300).start() // 持续 300 毫秒
      ```

  - title: 组合动画
    content: 同时处理多个属性动画。
    example: |
      ```kotlin
      // 同时改变透明度、旋转和缩放
      button.animate()
          .alpha(0.5f) // 透明度
          .rotation(90f) // 旋转
          .scaleX(1.5f) // 水平缩放
          .scaleY(1.5f) // 垂直缩放
          .setDuration(500) // 持续 500 毫秒
          .start()
      ```

  - title: 动画延迟
    content: 使用 setStartDelay() 设置动画开始前的延迟。
    example: |
      ```kotlin
      // 设置延迟 200 毫秒后开始移动
      button.animate().translationY(200f).setStartDelay(200).setDuration(300).start()
      ```

  - title: 动画监听
    content: 为动画设置监听器，以响应动画的开始和结束。
    example: |
      ```kotlin
      // 设置动画监听器
      button.animate()
          .alpha(0f)
          .setDuration(300)
          .setListener(object : AnimatorListenerAdapter() {
              override fun onAnimationStart(animation: Animator?) {
                  Toast.makeText(context, "动画开始", Toast.LENGTH_SHORT).show()
              }
              override fun onAnimationEnd(animation: Animator?) {
                  Toast.makeText(context, "动画结束", Toast.LENGTH_SHORT).show()
              }
          })
          .start()
      ```

  - title: 使用插值器
    content: 自定义动画插值器以调整动画的效果。
    example: |
      ```kotlin
      // 使用自定义插值器
      button.animate()
          .translationX(100f)
          .setInterpolator(AccelerateInterpolator()) // 使用加速插值器
          .setDuration(300)
          .start()

      // 其他可用的插值器：
      // - LinearInterpolator: 线性变化，动画以恒定速度进行
      // - DecelerateInterpolator: 动画开始时快，后面减速
      // - BounceInterpolator: 动画结束时有弹跳效果
      // - OvershootInterpolator: 动画结束时超过目标值，然后返回
      ```

  - title: 创建动画队列
    content: 使用 `ViewPropertyAnimatorQueue.from(view)` 创建一个动画队列，接着可以添加多个动画属性。
    example: |
      ```kotlin
      class MainActivity : AppCompatActivity() {

          private lateinit var myView: View
          private lateinit var startAnimationButton: Button

          override fun onCreate(savedInstanceState: Bundle?) {
              super.onCreate(savedInstanceState)
              setContentView(R.layout.activity_main)

              myView = findViewById(R.id.myView) // 获取需要动画的视图
              startAnimationButton = findViewById(R.id.startAnimationButton)

              startAnimationButton.setOnClickListener {
                  startAnimationQueue()
              }
          }

          private fun startAnimationQueue() {
              // 创建动画队列
              val animatorQueue = ViewPropertyAnimatorQueue.from(myView)

              // 第一个动画：向右平移
              animatorQueue
                  .newAnimation()
                  .setDuration(500)
                  .translationX(300f) // 向右平移300像素
                  .setListener(object : AnimatorListenerAdapter() {
                      override fun onAnimationEnd(animation: Animator) {
                          super.onAnimationEnd(animation)
                          println("第一动画结束")
                      }
                  })
                  .start()

              // 第二个动画：向下平移
              animatorQueue
                  .newAnimation()
                  .setDuration(500)
                  .translationY(200f) // 向下平移200像素
                  .setListener(object : AnimatorListenerAdapter() {
                      override fun onAnimationEnd(animation: Animator) {
                          super.onAnimationEnd(animation)
                          println("第二动画结束")
                      }
                  })
                  .start()

              // 第三个动画：旋转
              animatorQueue
                  .newAnimation()
                  .setDuration(500)
                  .rotation(360f) // 旋转360度
                  .setListener(object : AnimatorListenerAdapter() {
                      override fun onAnimationEnd(animation: Animator) {
                          super.onAnimationEnd(animation)
                          println("第三动画结束")
                      }
                  })
                  .start()
          }
      }
      ```
references:
  - title: "Property Animations Overview"
    url: https://developer.android.com/guide/topics/graphics/prop-animation
  - title: "ViewPropertyAnimator"
    url: https://developer.android.com/reference/android/view/ViewPropertyAnimator
  - title: "Using ViewPropertyAnimator"
    url: https://guides.codepath.com/android/Animations
  - title: "Animating Views with ViewPropertyAnimator"
    url: https://www.demo2s.com/android/android-viewpropertyanimator-tutorial-with-examples.html
