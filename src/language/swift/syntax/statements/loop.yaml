id: loop
title: 循环语句
query: Swift Loop Statement
comment: |
  - for-in
  - for-in 区间
  - for-in 半开区间
  - for-in stride
  - for-in stride 闭区间
  - for-in break
  - for-in continue
  - for-in where
  - where
  - repeat-while
description: Swift 的 `for-in` 循环用于重复执行一段代码块，可以遍历序列（例如数组、范围、字符串等）。`while` 和 `repeat-while` 循环则基于条件重复执行代码块。
usage:
  - title: for-in 循环遍历数组
    description: 使用 `for-in` 循环遍历数组中的每个元素。
    example: |
      ```swift
      let languages = ["Swift", "Java", "Go", "JavaScript"]

      for language in languages {
          print(language)
      }
      // 输出：
      // Swift
      // Java
      // Go
      // JavaScript
      ```
  - title: for-in 循环遍历区间
    description: 使用 `for-in` 循环遍历一个闭区间内的所有整数。
    example: |
      ```swift
      for i in 1...3 {
          print(i)
      }
      // 输出：
      // 1
      // 2
      // 3
      ```
  - title: for-in 循环遍历半开区间
    description: 使用 `for-in` 循环遍历一个半开区间内的所有整数,不包含上限值。
    example: |
      ```swift
      for i in 1..<4 {
          print(i)
      }
      // 输出：
      // 1
      // 2
      // 3
      ```
  - title: for-in 循环使用 stride 函数
    description: 使用 `stride(from:to:by:)` 函数创建一个序列，以指定步长遍历区间，不包含上限值。`stride(from:through:by:)` 函数创建一个序列，以指定步长遍历区间，包含上限值。
    example: |
      ```swift
      for i in stride(from: 1, to: 10, by: 2) {
          print(i)
      }
      // 输出：
      // 1
      // 3
      // 5
      // 7
      // 9

      for i in stride(from: 1, through: 10, by: 2) {
          print(i)
      }
      // 输出：
      // 1
      // 3
      // 5
      // 7
      // 9

      ```
  - title: for-in 循环使用 where 语句过滤
    description: 使用 `where` 语句在 `for-in` 循环中添加过滤条件。
    example: |
      ```swift
      let languages = ["Swift", "Java", "Go", "JavaScript"]

      for language in languages where language != "Java" {
          print(language)
      }
      // 输出：
      // Swift
      // Go
      // JavaScript
      ```
  - title: for-in 循环使用 break 语句
    description: 使用 `break` 语句提前结束 `for-in` 循环。
    example: |
      ```swift
      for i in 1...5 {
          if i == 3 {
              break // 当 i 等于 3 时，跳出循环
          }
          print(i)
      }
      // 输出：
      // 1
      // 2
      ```
  - title: for-in 循环使用 continue 语句
    description: 使用 `continue` 语句跳过当前迭代，继续执行下一次迭代。
    example: |
      ```swift
      for i in 1...5 {
          if i == 3 {
              continue // 当 i 等于 3 时，跳过本次迭代
          }
          print(i)
      }
      // 输出：
      // 1
      // 2
      // 4
      // 5
      ```
  - title: while 循环
    description: 只要条件为真，`while` 循环就会一直执行代码块。
    example: |
      ```swift
      var i = 1
      while i <= 3 {
          print(i)
          i += 1
      }
      // 输出：
      // 1
      // 2
      // 3
      ```
  - title: repeat-while 循环
    description: '`repeat-while` 循环会先执行一次代码块，然后再判断条件是否为真，如果为真则继续循环。'
    example: |
      ```swift
      var i = 1
      repeat {
          print(i)
          i += 1
      } while i <= 3
      // 输出：
      // 1
      // 2
      // 3
      ```
references:
  - title: Swift for Loop (with Examples)
    url: https://www.programiz.com/swift-programming/for-in-loop
