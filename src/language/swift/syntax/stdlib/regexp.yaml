id: regexp
title: 正则表达式
query: Swift 正则表达式的使用
comment: Swift 中正则表达式的使用从 NSRegularExpression 演进到 Swift 5.7 引入的 Regex 和 RegexBuilder，简化了匹配、替换和提取文本的操作。
description: |
  在 Swift 中，正则表达式有两种常见实现方式：
  
  1. **NSRegularExpression**: 这是 Foundation 框架中的经典方式，适用于复杂的正则匹配操作。创建 NSRegularExpression 实例后可以使用 `firstMatch`, `matches` 等方法查找文本中的匹配项。
  
  2. **Regex 和 RegexBuilder** (Swift 5.7 引入): Swift 引入了 `Regex` 类型，并允许通过正则表达式字面量 (`/pattern/`) 在编译时检查正则表达式的正确性。此外，`RegexBuilder` 提供了一种声明式的方式来构建正则表达式，允许更清晰的代码结构，特别适用于复杂匹配场景。

  使用场景包括字符串查找、替换、验证（如验证电子邮件、日期格式等）。

example:
  - title: 使用 NSRegularExpression 匹配电子邮件
    content: |
      ```swift
      import Foundation

      let text = "Contact me at email@example.com"
      let regex = try! NSRegularExpression(pattern: "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}", options: [])
      let range = NSRange(location: 0, length: text.utf16.count)
      
      if let match = regex.firstMatch(in: text, options: [], range: range) {
          print("Found email: \(text[Range(match.range, in: text)!])") // 输出匹配的电子邮件
      }
      ```
  - title: 使用 Swift 5.7 正则表达式字面量
    content: |
      ```swift
      let text = "The cat sat on the mat."
      let matches = text.matches(of: /[a-z]at/) // 匹配以 "at" 结尾的单词
      
      for match in matches {
          print(match) // 输出 "cat", "sat", "mat"
      }
      ```
  - title: 使用 RegexBuilder 构建正则表达式
    content: |
      ```swift
      import RegexBuilder

      let pattern = Regex {
          "My name is "
          Capture {
              OneOrMore(.word) // 匹配名字
          }
          " and I'm "
          Capture {
              OneOrMore(.digit) // 匹配年龄
          }
          " years old."
      }

      let text = "My name is Alice and I'm 30 years old."
      if let match = text.firstMatch(of: pattern) {
          let (name, age) = match.output
          print("Name: \(name), Age: \(age)") // 输出 Name: Alice, Age: 30
      }
      ```

references:
  - title: Regex | Apple Developer Documentation
    url: https://developer.apple.com/documentation/swift/regex
