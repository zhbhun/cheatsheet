id: custom
title: 自定义视图
query: Kotlin custom android View
comment: |
  介绍如何自定义 Android 视图，实现特定的 UI 效果，包括：
  - 创建自定义视图类
  - 自定义属性：声明、配置，获取以及更新处理，注意使用
  - 自定义视图的大小和布局：测量、布局和大小等回调
  - 自定义渲染：绘制视图内容
  - 处理用户交互
  - 设计可访问性
  - 使用 BindingAdapter 扩展属性
  - View 的生命周期和回调：初始化、大小变化以及父类重新布局的回调
description: Android 中的视图是指屏幕上显示的所有内容的基本组成部分，例如按钮、文本框、图像等。自定义视图允许开发者创建不属于 Android 框架的独特交互元素和视觉效果，扩展 Android UI 的能力。自定义视图的本质是继承 `View` 类或其子类，并重写相关方法来实现自定义的样式和行为。
usage:
  - title: 创建自定义视图类
    description: 要创建自定义视图，您需要创建一个继承自 `View` 类或其子类的 Kotlin 类。建议根据所需的功能选择最接近的 `View` 子类继承，例如继承 `TextView` 来创建自定义文本视图。
    example: |
      ```kotlin
      // 创建一个名为 MyCustomView 的新类，继承自 View 类
      class MyCustomView(context: Context, attrs: AttributeSet? = null) : View(context, attrs) {

          // 构造函数，用于初始化视图
          // 在这里，您可以初始化变量、设置监听器等

          // 重写 onDraw() 方法来绘制视图的内容
          override fun onDraw(canvas: Canvas) {
              super.onDraw(canvas)

              // 在这里添加您的绘图代码
              // 例如，绘制一个圆圈
              val paint = Paint()
              paint.color = Color.RED
              canvas.drawCircle(100f, 100f, 50f, paint)
          }
      }
      ```
  - title: 自定义属性
    description: |
      自定义属性允许开发者通过 XML 布局文件配置自定义视图的外观和行为。

      1. **声明自定义属性:** 在 `res/values/attrs.xml` 文件中，使用 `<declare-styleable>` 标签定义自定义属性，并使用 `<attr>` 标签声明每个属性的名称、格式和默认值。
      2. **在 XML 中配置属性:** 在布局文件中使用自定义视图时，通过命名空间和属性名称来设置自定义属性的值。
      3. **获取属性值:** 在自定义视图类的构造函数中，使用 `context.obtainStyledAttributes()` 方法获取 `TypedArray` 对象，然后使用 `TypedArray` 的 `get...()` 方法获取属性值。
      4. **处理属性更新:** 重写 `onTouchEvent()` 等方法来处理属性值的变化，并在需要时调用 `invalidate()` 方法来触发视图重绘，或调用 `requestLayout()` 方法来触发视图重新布局。
    example: |
      ```xml
      <!-- res/values/attrs.xml -->
      <resources>
          <declare-styleable name="MyCustomView">
              <attr name="circleColor" format="color" />
              <attr name="circleRadius" format="dimension" />
          </declare-styleable>
      </resources>
      ```

      ```kotlin
      // MyCustomView.kt
      class MyCustomView(context: Context, attrs: AttributeSet? = null) : View(context, attrs) {

          private var circleColor: Int = Color.RED
          private var circleRadius: Float = 50f

          init {
              // 获取自定义属性的值
              context.theme.obtainStyledAttributes(attrs, R.styleable.MyCustomView, 0, 0).apply {
                  try {
                      circleColor = getColor(R.styleable.MyCustomView_circleColor, Color.RED)
                      circleRadius = getDimension(R.styleable.MyCustomView_circleRadius, 50f)
                  } finally {
                      recycle()
                  }
              }
          }

          override fun onDraw(canvas: Canvas) {
              super.onDraw(canvas)
              val paint = Paint()
              paint.color = circleColor
              canvas.drawCircle(100f, 100f, circleRadius, paint)
          }
      }
      ```

      ```xml
      <!-- 在布局文件中使用自定义视图和属性 -->
      <com.example.app.MyCustomView
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          app:circleColor="@color/blue"
          app:circleRadius="100dp" />
      ```
  - title: 自定义视图的大小和布局
    description: |
      自定义视图需要根据其内容和父视图的约束来确定自身的大小和位置。
      - **测量:** 重写 `onMeasure()` 方法来计算视图的尺寸。
      - **布局:** 重写 `onLayout()` 方法来设置子视图的位置。
      - **大小:**  可以使用 `getMeasuredWidth()`、`getMeasuredHeight()`、`getWidth()` 和 `getHeight()` 方法获取视图的测量尺寸和最终尺寸。
    example: |
      ```kotlin
      // MyCustomView.kt
      class MyCustomView(context: Context, attrs: AttributeSet? = null) : View(context, attrs) {
          // ...

          override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {
              // 计算视图的期望宽度和高度
              val desiredWidth = // ...
              val desiredHeight = // ...

              // 根据父视图的约束条件和期望尺寸设置视图的测量尺寸
              setMeasuredDimension(
                  resolveSize(desiredWidth, widthMeasureSpec),
                  resolveSize(desiredHeight, heightMeasureSpec)
              )
          }

          override fun onLayout(changed: Boolean, left: Int, top: Int, right: Int, bottom: Int) {
              super.onLayout(changed, left, top, right, bottom)
              // 设置子视图的位置
          }
      }
      ```
  - title: 自定义渲染
    description: |
      自定义视图的核心是绘制其外观。
      - 重写 `onDraw()` 方法来绘制视图的内容。
      - 使用 `Canvas` 对象绘制图形、路径和文本。
      - 使用 `Paint` 对象设置颜色、样式和效果。
    example: |
      ```kotlin
      // MyCustomView.kt
      class MyCustomView(context: Context, attrs: AttributeSet? = null) : View(context, attrs) {
          // ...

          override fun onDraw(canvas: Canvas) {
              super.onDraw(canvas)

              // 创建 Paint 对象
              val paint = Paint()
              paint.color = Color.BLUE
              paint.style = Paint.Style.FILL

              // 绘制圆形
              canvas.drawCircle(100f, 100f, 50f, paint)
          }
      }
      ```
  - title: 处理用户交互
    description: |
      自定义视图可以响应用户的触摸事件，例如点击、滑动等。
      - 重写 `onTouchEvent()` 方法来处理触摸事件。
      - 使用 `MotionEvent` 对象获取触摸事件的类型、坐标等信息。
    example: |
      ```kotlin
      // MyCustomView.kt
      class MyCustomView(context: Context, attrs: AttributeSet? = null) : View(context, attrs) {
          // ...

          override fun onTouchEvent(event: MotionEvent): Boolean {
              when (event.action) {
                  MotionEvent.ACTION_DOWN -> {
                      // 处理按下事件
                  }
                  MotionEvent.ACTION_MOVE -> {
                      // 处理移动事件
                  }
                  MotionEvent.ACTION_UP -> {
                      // 处理抬起事件
                  }
              }
              return true
          }
      }
      ```
  - title: 设计可访问性
    description: |
      为了让所有用户都能使用您的应用，请确保您的自定义视图具有良好的可访问性。
      - 使用 `android:contentDescription` 属性为视图提供文本描述，以便屏幕阅读器可以将其读给用户。
      - 在适当的时候发送可访问性事件，例如 `AccessibilityEvent.TYPE_VIEW_CLICKED`。
      - 支持备用控制器，例如 D-pad 或轨迹球。
    example: |
      ```xml
      <com.example.app.MyCustomView
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          android:contentDescription="@string/my_custom_view_description" />
      ```
  - title: 使用 BindingAdapter 扩展属性
    description: |
      `BindingAdapter` 允许开发者创建将数据绑定到自定义视图的自定义属性，并在数据发生变化时自动更新视图。
      1. **创建 BindingAdapter:** 使用 `@BindingAdapter` 注解创建一个静态方法，该方法接收自定义视图和要绑定到的数据作为参数。
      2. **在布局中使用自定义属性:** 在布局文件中使用自定义属性，并将其值设置为数据绑定的表达式。
    example: |
      ```kotlin
      @BindingAdapter("circleColor")
      fun setCircleColor(view: MyCustomView, color: Int) {
          view.circleColor = color
      }
      ```

      ```xml
      <com.example.app.MyCustomView
          android:layout_width="wrap_content"
          android:layout_height="wrap_content"
          app:circleColor="@{viewModel.circleColor}" />
      ```
  - title: 使用 BindingAdapter 扩展属性
    description: |
      可以使用 `BindingAdapter` 来扩展自定义视图的属性，以便在 XML 布局中直接绑定数据或处理事件。`BindingAdapter` 是一个静态方法，使用 `@BindingAdapter` 注解标记，用于将 XML 属性与自定义视图的代码逻辑关联起来。
    example: |
      ```kotlin
      @BindingAdapter("app:customText")
      fun setCustomText(view: MyCustomView, text: String) {
          view.text = text
      }
      ```
  - title: View 的生命周期和回调
    description: |
      View 类有一系列生命周期回调方法，开发者可以在这些方法中执行特定操作。

      - `onFinishInflate()`: 当视图层次结构从 XML 资源中成功解析并加载后调用。
      - `onMeasure(widthMeasureSpec, heightMeasureSpec)`: 当视图需要计算其大小时调用，由 `MeasureSpec` 参数指定测量模式和大小限制。
      - `onLayout(changed, left, top, right, bottom)`: 当视图需要定位自身及其子视图时调用，由 `changed` 参数指示布局是否发生变化，以及 `left`、`top`、`right` 和 `bottom` 参数指定视图在父视图中的位置。
      - `onSizeChanged(w, h, oldw, oldh)`: 当视图的大小发生变化时调用，由 `w` 和 `h` 参数指定视图的新宽度和高度，以及 `oldw` 和 `oldh` 参数指定视图的旧宽度和高度。
      - `onDraw(canvas)`: 当视图需要绘制其内容时调用，由 `canvas` 参数提供绘图表面。
      - `onAttachedToWindow()`: 当视图被附加到窗口时调用。
      - `onDetachedFromWindow()`: 当视图从窗口中分离时调用。
    example: |
      ```kotlin
      // MyCustomView.kt
      class MyCustomView(context: Context, attrs: AttributeSet? = null) : View(context, attrs) {
          // ...

          override fun onFinishInflate() {
              super.onFinishInflate()
              // 在这里初始化子视图或执行其他操作
          }

          // ...
      }
references:
  - title: Create a view class
    url: https://developer.android.com/develop/ui/views/layout/custom-views/create-view
  - title: How to create constructor of custom view with Kotlin
    url: https://stackoverflow.com/questions/20670828/how-to-create-constructor-of-custom-view-with-kotlin
  - title: Exploring Kotlin initialization with Android custom views
    url: https://medium.com/google-developer-experts/exploring-kotlin-initialization-with-android-custom-views-cde06e915e8d
