id: velocity-tracker
title: VelocityTracker
query: Android VelocityTracker
description: VelocityTracker 是 Android 系统提供的用于追踪手指滑动速度的类，可以用于实现 fling 手势、惯性滑动等效果。它可以跟踪多个指针的速度，并计算出每个指针在 X 轴和 Y 轴上的速度。
usage:
  - title: 获取 VelocityTracker 实例
    description: 使用 `VelocityTracker.obtain()` 方法获取一个新的 VelocityTracker 实例。由于 VelocityTracker 对象的创建和销毁比较耗费资源，建议在使用完后调用 `recycle()` 方法回收它。
    example: |
      ```kotlin
      private var velocityTracker: VelocityTracker? = null

      override fun onTouchEvent(event: MotionEvent): Boolean {
          when (event.actionMasked) {
              MotionEvent.ACTION_DOWN -> {
                  // 获取 VelocityTracker 实例
                  velocityTracker = VelocityTracker.obtain()
                  // 添加第一个事件
                  velocityTracker?.addMovement(event)
              }
              MotionEvent.ACTION_MOVE -> {
                  // 添加后续事件
                  velocityTracker?.addMovement(event)
              }
              MotionEvent.ACTION_UP, MotionEvent.ACTION_CANCEL -> {
                  // 计算速度并处理 fling 手势
                  velocityTracker?.let { 
                      // ... 处理 fling 手势
                      // 回收 VelocityTracker 实例
                      it.recycle()
                      velocityTracker = null
                  }
              }
          }
          return true
      }
      ```
  - title: 添加 MotionEvent
    description: 调用 `addMovement(event)` 方法将 MotionEvent 添加到 VelocityTracker 中，VelocityTracker 会根据这些事件计算速度。建议在 `ACTION_DOWN`、`ACTION_MOVE` 事件中调用该方法。
    example: |
      ```kotlin
      override fun onTouchEvent(event: MotionEvent): Boolean {
          when (event.actionMasked) {
              MotionEvent.ACTION_DOWN -> {
                  velocityTracker = VelocityTracker.obtain()
                  velocityTracker?.addMovement(event)
              }
              MotionEvent.ACTION_MOVE -> {
                  // 在 MOVE 事件中添加 MotionEvent
                  velocityTracker?.addMovement(event) 
              }
              // ...
          }
          return true
      }
      ```
  - title: 计算速度
    description: |-
      在需要获取速度的时候，调用 `computeCurrentVelocity(units, maxVelocity)` 方法计算当前速度。

      - `units`:  速度单位，1 表示像素/毫秒，1000 表示像素/秒。
      - `maxVelocity`:  最大速度，用于过滤异常值。

      **注意：**  `computeCurrentVelocity()` 方法必须在 `getXVelocity()` 或 `getYVelocity()` 方法之前调用。
    example: |
      ```kotlin
      override fun onTouchEvent(event: MotionEvent): Boolean {
          // ...
          when (event.actionMasked) {
              // ...
              MotionEvent.ACTION_UP -> {
                  velocityTracker?.let { 
                      it.computeCurrentVelocity(1000, mMaximumFlingVelocity) // 计算速度，单位为像素/秒
                      val xVelocity = it.xVelocity // 获取 X 轴速度
                      val yVelocity = it.yVelocity // 获取 Y 轴速度
                      // ... 根据速度处理 fling 手势
                  }
              }
          }
          return true
      }
      ```
  - title: 获取速度
    description: |-
      计算速度后，可以通过以下方法获取不同轴向的速度：

      - `getXVelocity()`: 获取 X 轴速度。
      - `getYVelocity()`: 获取 Y 轴速度。
      - `getXVelocity(id)`: 获取指定指针 ID 的 X 轴速度。
      - `getYVelocity(id)`: 获取指定指针 ID 的 Y 轴速度。
    example: |
      ```kotlin
      override fun onTouchEvent(event: MotionEvent): Boolean {
          // ...
          when (event.actionMasked) {
              // ...
              MotionEvent.ACTION_UP -> {
                  velocityTracker?.let { 
                      it.computeCurrentVelocity(1000, mMaximumFlingVelocity)
                      val xVelocity = it.getXVelocity() // 获取 X 轴速度
                      val yVelocity = it.getYVelocity() // 获取 Y 轴速度

                      // 如果是多点触控，可以通过 pointerId 获取对应指针的速度
                      val pointerId = event.getPointerId(0)
                      val xVelocityById = it.getXVelocity(pointerId)
                      // ...
                  }
              }
          }
          return true
      }
      ```
  - title: 回收 VelocityTracker 实例
    description: 当不再使用 VelocityTracker 时，调用 `recycle()` 方法回收它，以便系统复用，节省资源。
    example: |
      ```kotlin
      override fun onTouchEvent(event: MotionEvent): Boolean {
          // ...
          when (event.actionMasked) {
              // ...
              MotionEvent.ACTION_UP, MotionEvent.ACTION_CANCEL -> {
                  velocityTracker?.let { 
                      // ...
                      it.recycle()
                      velocityTracker = null
                  }
              }
          }
          return true
      }
      ```
references:
  - title: VelocityTracker | Android Developers
    url: https://developer.android.com/reference/android/view/VelocityTracker
  - title: VelocityTracker的用法、原理与场景使用场景
    url: https://juejin.cn/post/7205403145378250789
