id: touch
title: 触摸
query: Android 触摸事件
comment: 尽量详尽的演示不同属性和场景用法
description: "Kotlin 中的触摸事件处理是通过 `onTouchEvent()` 方法和 `MotionEvent` 类实现的。开发者可以捕捉到用户的触摸动作，包括单点触摸和多点触摸，从而提供丰富的交互体验。常用的触摸事件包括 `ACTION_DOWN`、`ACTION_MOVE` 和 `ACTION_UP`。"
usage:
  - title: 单点触摸事件
    content: "使用 `onTouchEvent()` 方法来处理用户的单点触摸事件，通常将其绑定到一个 `View`，如按钮或自定义视图。"
    example: |
      ```kotlin
      import android.graphics.Color
      import android.os.Bundle
      import android.view.MotionEvent
      import android.widget.Toast
      import androidx.appcompat.app.AppCompatActivity
      import androidx.core.content.ContextCompat

      class MainActivity : AppCompatActivity() {
          override fun onCreate(savedInstanceState: Bundle?) {
              super.onCreate(savedInstanceState)
              setContentView(R.layout.activity_main)

              // 获取要绑定触摸事件的视图
              val myView = findViewById<View>(R.id.my_view)
              myView.setOnTouchListener { _, event ->
                  when (event.action) {
                      MotionEvent.ACTION_DOWN -> {
                          // 当触摸视图时显示提示
                          Toast.makeText(this, "Touch down", Toast.LENGTH_SHORT).show()
                          myView.setBackgroundColor(Color.GREEN) // 设置背景色为绿色
                      }
                      MotionEvent.ACTION_MOVE -> {
                          // 当手指在视图上滑动时的响应
                          myView.setBackgroundColor(Color.YELLOW) // 设置背景色为黄色
                      }
                      MotionEvent.ACTION_UP -> {
                          // 当手指离开视图时的响应
                          myView.setBackgroundColor(Color.RED) // 设置背景色为红色
                      }
                  }
                  true // 返回 true 表示事件已处理
              }
          }
      }
      ```

  - title: 多点触摸事件
    content: "使用 `MotionEvent` 处理多点触摸事件，如缩放或旋转。可以通过 `getPointerCount()` 和 `getX()`、`getY()` 方法获取每个触点的信息。"
    example: |
      ```kotlin
      override fun onTouchEvent(event: MotionEvent): Boolean {
          val pointerCount = event.pointerCount // 获取触点数量
          for (i in 0 until pointerCount) {
              val pointerId = event.getPointerId(i) // 获取指针 ID
              val x = event.getX(i) // 获取 X 坐标
              val y = event.getY(i) // 获取 Y 坐标
              // 处理多点触摸逻辑，例如显示坐标
              Log.d("TouchEvent", "Pointer $pointerId at ($x, $y)")
          }
          return true
      }
      ```

  - title: 手势检测
    content: "为了处理复杂的手势（如双击、长按等），可以使用 `GestureDetector` 类来简化手势识别。"
    example: |
      ```kotlin
      import android.os.Bundle
      import android.view.GestureDetector
      import android.view.MotionEvent
      import android.widget.Toast
      import androidx.appcompat.app.AppCompatActivity

      class MainActivity : AppCompatActivity() {
          private lateinit var gestureDetector: GestureDetector

          override fun onCreate(savedInstanceState: Bundle?) {
              super.onCreate(savedInstanceState)
              setContentView(R.layout.activity_main)

              gestureDetector = GestureDetector(this, object : GestureDetector.SimpleOnGestureListener() {
                  override fun onDoubleTap(e: MotionEvent?): Boolean {
                      Toast.makeText(this@MainActivity, "Double Tap", Toast.LENGTH_SHORT).show()
                      return true
                  }

                  override fun onLongPress(e: MotionEvent?) {
                      Toast.makeText(this@MainActivity, "Long Press", Toast.LENGTH_SHORT).show()
                  }
              })
          }

          override fun onTouchEvent(event: MotionEvent): Boolean {
              gestureDetector.onTouchEvent(event) // 将触摸事件传递给手势检测器
              return super.onTouchEvent(event)
          }
      }
      ```

  - title: 自定义触摸处理
    content: "可以在自定义视图中重写 `onTouchEvent()` 方法，处理特定的触摸事件逻辑。"
    example: |
      ```kotlin
      import android.content.Context
      import android.graphics.Canvas
      import android.graphics.Color
      import android.graphics.Paint
      import android.util.AttributeSet
      import android.view.View

      class CustomView @JvmOverloads constructor(
          context: Context, attrs: AttributeSet? = null
      ) : View(context, attrs) {
          private val paint = Paint()

          override fun onDraw(canvas: Canvas) {
              super.onDraw(canvas)
              canvas.drawColor(Color.WHITE) // 设置背景为白色
              paint.color = Color.BLUE
              canvas.drawCircle(width / 2f, height / 2f, 100f, paint) // 绘制蓝色圆形
          }

          override fun onTouchEvent(event: MotionEvent): Boolean {
              when (event.action) {
                  MotionEvent.ACTION_DOWN -> {
                      paint.color = Color.RED // 改变圆形颜色为红色
                      invalidate() // 重新绘制
                  }
              }
              return true
          }
      }
      ```

references:
  - title: "Handling Touch Events in Android"
    url: https://developer.android.com/training/gestures
  - title: "Understanding Android Touch Events"
    url: https://lynxbee.com/android-touch-events
  - title: "Responding to Touch Events"
    url: https://riptutorial.com/android/example/2577/responding-to-touch-events
