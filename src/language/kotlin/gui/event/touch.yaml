id: touch
title: 触摸
query: Android 触摸事件
comment: 尽量详触摸事件的用法，包括：如何绑定事件、触摸事件信息、事件传播链路、父视图拦截事件、子视图标记事件已处理等
description: Android 触摸事件是用户与应用程序交互的重要方式，了解触摸事件的处理机制对于开发流畅且响应迅速的应用程序至关重要。本文详细介绍 Android 触摸事件的用法，包括如何绑定事件、触摸事件信息、事件传播链路、父视图拦截事件、子视图标记事件已处理等。
usage:
  - title: 绑定触摸事件
    description: 在 Android 中，可以使用 `View.OnTouchListener` 接口来绑定触摸事件监听器。`OnTouchListener` 接口中定义了一个 `onTouch(View view, MotionEvent event)` 方法，当绑定到 View 的监听器检测到触摸事件时，会回调该方法。
    example: |
      ```kotlin
      val myView = findViewById<View>(R.id.my_view)

      myView.setOnTouchListener { view, event ->
          when (event.action) {
              MotionEvent.ACTION_DOWN -> {
                  // 处理按下事件
              }
              MotionEvent.ACTION_MOVE -> {
                  // 处理移动事件
              }
              MotionEvent.ACTION_UP -> {
                  // 处理抬起事件
              }
          }
          true // 返回 true 表示事件已消耗
      }
      ```
  - title: 触摸事件信息
    description: 触摸事件的相关信息封装在 `MotionEvent` 对象中，可以通过 `MotionEvent` 对象获取以下信息：
    example: |
      ```kotlin
      myView.setOnTouchListener { view, event ->
          // 获取事件类型
          val action = event.actionMasked

          // 获取触摸点坐标
          val x = event.x
          val y = event.y

          // 获取事件时间
          val eventTime = event.eventTime

          // 获取触摸点 ID
          val pointerId = event.getPointerId(0)

          // ... 处理事件 ...

          true
      }
      ```
  - title: 事件传播链路
    description: |-
      Android 触摸事件的传播顺序是 Activity -> Window -> ViewGroup -> View。

      当触摸事件发生时，事件会按照上述顺序依次传递，每个层级的视图都有机会处理或拦截该事件。

      - **分发（dispatchTouchEvent）：** 将事件分发到下一级，决定事件是否继续传递。
      - **拦截（onInterceptTouchEvent）：** ViewGroup 特有，判断是否拦截事件，拦截后事件将在 ViewGroup 的 onTouchEvent 中处理。
      - **处理（onTouchEvent）：** 处理触摸事件，返回 true 表示事件已消耗，不再继续传递。
    example: |
      ```
      // 事件传播顺序
      Activity.dispatchTouchEvent()
          -> Window.superDispatchTouchEvent()
              -> DecorView.superDispatchTouchEvent()
                  -> ViewGroup.dispatchTouchEvent()
                      -> ViewGroup.onInterceptTouchEvent()
                      -> View.dispatchTouchEvent()
                          -> View.onTouchEvent()
                      -> ViewGroup.onTouchEvent()
                  -> ...
              -> View.onTouchEvent()
          -> ViewGroup.onTouchEvent()
      -> Activity.onTouchEvent()
      ```
  - title: 父视图拦截事件
    description: |-
      ViewGroup 可以通过 `onInterceptTouchEvent()` 方法拦截触摸事件，如果返回 `true`，则事件将不会继续传递给子视图，而是由 ViewGroup 自身处理。

      在以下情况下，ViewGroup 通常会拦截事件：

      - ViewGroup 需要处理滑动、缩放等手势。
      - ViewGroup 需要拦截子视图的点击事件。
    example: |
      ```kotlin
      class MyViewGroup(context: Context, attrs: AttributeSet?) : LinearLayout(context, attrs) {

          override fun onInterceptTouchEvent(ev: MotionEvent): Boolean {
              // 判断是否需要拦截事件
              return true // 拦截事件
          }

          // ... 处理事件 ...
      }
      ```
  - title: 子视图标记事件已处理
    description: |-
      如果子视图已经处理了触摸事件，不希望父视图再处理，可以调用 `MotionEvent.ACTION_CANCEL` 方法将事件标记为已取消。父视图在收到 `ACTION_CANCEL` 事件后，应该停止处理该事件序列（不再执行 onTouchEvent）
    example: |
      ```kotlin
      class MyView(context: Context, attrs: AttributeSet?) : View(context, attrs) {

          override fun onTouchEvent(event: MotionEvent): Boolean {
              when (event.action) {
                  MotionEvent.ACTION_DOWN -> {
                      // ... 处理按下事件 ...
                  }
                  MotionEvent.ACTION_MOVE -> {
                      // ... 处理移动事件 ...
                  }
                  MotionEvent.ACTION_UP -> {
                      // ... 处理抬起事件 ...

                      // 标记事件已处理
                      event.action = MotionEvent.ACTION_CANCEL
                  }
              }
              true // 返回 true 表示事件已消耗
          }
      }
      ```
  - title: 请求父视图不拦截事件
    description: |-
      子视图可以通过调用父视图的 `requestDisallowInterceptTouchEvent(true)` 方法请求父视图不要拦截事件。

      调用该方法后，父视图在 `onInterceptTouchEvent()` 方法中会收到 `disallowIntercept` 参数为 `true`，表示子视图请求不要拦截事件。
    example: |
      ```kotlin
      class MyView(context: Context, attrs: AttributeSet?) : View(context, attrs) {

          override fun onTouchEvent(event: MotionEvent): Boolean {
              when (event.action) {
                  MotionEvent.ACTION_DOWN -> {
                      // 请求父视图不要拦截事件
                      parent.requestDisallowInterceptTouchEvent(true)
                  }
                  // ... 处理其他事件 ...
              }
              true // 返回 true 表示事件已消耗
          }
      }
      ```
references:
  - title: 一文读懂Android TouchEvent 事件分发、拦截、处理过程
    url: https://libill.github.io/2019/09/09/android-touch-event/
