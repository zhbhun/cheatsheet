id: animation
title: 动画资源
query: Android 动画资源
comment: 介绍如何在 Android 项目中创建并使用不同类型的动画资源，包括属性动画、逐帧动画等。
description: |
  在 Android 中，动画资源文件通常用于增强应用的用户体验。常见的动画类型包括属性动画和逐帧动画。属性动画可以操作对象的属性（如透明度、位置等），而逐帧动画通过切换一系列图片实现动态效果。你可以通过 XML 定义这些动画，并在 Kotlin 代码中加载与使用。本文介绍了如何创建和使用这些动画资源。
usage:
  - title: 创建并使用属性动画 (ObjectAnimator)
    content: |
      `ObjectAnimator` 用于对对象的某个属性进行动画操作，常用于视图的动画操作，如透明度、旋转或平移。下面示例展示了如何定义一个旋转动画并在代码中使用。
    example: |
      ```xml
      <!-- res/animator/rotation.xml -->
      <objectAnimator
          xmlns:android="http://schemas.android.com/apk/res/android"
          android:propertyName="rotation"
          android:duration="1000"
          android:valueFrom="0"
          android:valueTo="360"
          android:repeatCount="infinite"/>
      ```

      ```kotlin
      val imageView = findViewById<ImageView>(R.id.myImageView)
      val rotationAnimator = AnimatorInflater.loadAnimator(this, R.animator.rotation) as ObjectAnimator
      rotationAnimator.target = imageView
      rotationAnimator.start()
      ```

  - title: 使用 ValueAnimator
    content: |
      `ValueAnimator` 允许定义动画的值变化并手动更新属性，不限定于视图对象。适用于自定义动画逻辑，如进度条更新。
    example: |
      ```xml
      <!-- res/animator/value_animator.xml -->
      <animator
          xmlns:android="http://schemas.android.com/apk/res/android"
          android:duration="1000"
          android:valueFrom="0"
          android:valueTo="100"
          android:valueType="intType"/>
      ```

      ```kotlin
      val valueAnimator = AnimatorInflater.loadAnimator(this, R.animator.value_animator) as ValueAnimator
      valueAnimator.addUpdateListener { animation ->
          val animatedValue = animation.animatedValue as Int
          progressBar.progress = animatedValue // 更新进度条
      }
      valueAnimator.start()
      ```

  - title: 使用 AnimatorSet 组合多个动画
    content: |
      `AnimatorSet` 允许组合多个动画并设置它们是顺序执行还是同时执行。以下示例展示了如何先淡入视图，再移动视图。
    example: |
      ```xml
      <!-- res/animator/animator_set.xml -->
      <set xmlns:android="http://schemas.android.com/apk/res/android"
          android:ordering="sequentially">

          <objectAnimator
              android:propertyName="alpha"
              android:duration="500"
              android:valueFrom="0"
              android:valueTo="1"/>

          <objectAnimator
              android:propertyName="translationY"
              android:duration="500"
              android:valueFrom="100"
              android:valueTo="0"/>
      </set>
      ```

      ```kotlin
      val animatorSet = AnimatorInflater.loadAnimator(this, R.animator.animator_set) as AnimatorSet
      animatorSet.setTarget(imageView) // 设置动画目标
      animatorSet.start()
      ```

  - title: 使用 PropertyValuesHolder 同时操作多个属性
    content: |
      `PropertyValuesHolder` 允许同时对多个属性进行动画操作。以下示例演示了如何在一个动画中同时改变视图的透明度和垂直位置。
    example: |
      ```xml
      <!-- res/animator/multi_property_animation.xml -->
      <objectAnimator
          xmlns:android="http://schemas.android.com/apk/res/android"
          android:propertyName="translationY"
          android:valueFrom="0"
          android:valueTo="100"
          android:duration="500">

          <propertyValuesHolder
              android:propertyName="alpha"
              android:valueFrom="1"
              android:valueTo="0.5"/>
      </objectAnimator>
      ```

      ```kotlin
      val animator = AnimatorInflater.loadAnimator(this, R.animator.multi_property_animation) as ObjectAnimator
      animator.target = imageView
      animator.start()
      ```

  - title: 使用 Keyframe 定义关键帧动画
    content: |
      `Keyframe` 允许定义动画的多个关键帧，创建非线性或复杂的动画效果。以下示例演示了如何使用关键帧控制视图在动画过程中的多个位置变化。
    example: |
      ```xml
      <!-- res/animator/keyframe_animation.xml -->
      <set xmlns:android="http://schemas.android.com/apk/res/android">
          <objectAnimator
              android:propertyName="translationY"
              android:duration="1000">

              <keyframe
                  android:fraction="0"
                  android:value="0"/>

              <keyframe
                  android:fraction="0.5"
                  android:value="50"/>

              <keyframe
                  android:fraction="1"
                  android:value="100"/>
          </objectAnimator>
      </set>
      ```

      ```kotlin
      val keyframeAnimator = AnimatorInflater.loadAnimator(this, R.animator.keyframe_animation) as AnimatorSet
      keyframeAnimator.setTarget(imageView)
      keyframeAnimator.start()
      ```

references:
  - title: "Animation resources | Android Developers"
    url: https://developer.android.com/guide/topics/resources/animation-resource
  - title: "Property Animation Overview | Android Developers"
    url: https://developer.android.com/guide/topics/graphics/prop-animation
  - title: "AnimatorSet | Android Developers"
    url: https://developer.android.com/reference/android/animation/AnimatorSet
  - title: "Android动画入门教程之kotlin - 腾讯云"
    url: https://cloud.tencent.com/developer/article/1807526
