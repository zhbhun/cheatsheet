id: physics-based-animations
title: 物理动画库
query: Android 物理动画库
comment: 尽量详尽的演示不同属性和场景用法
description: "Kotlin 的物理动画库利用物理模拟创建自然流畅的动画效果。它允许开发者通过调节阻尼比和刚度等参数来控制动画的反应，适用于需要逼真运动的场景。"
usage:
  - title: 创建弹簧动画
    content: 使用 SpringAnimation 类来创建基础的弹簧动画。
    example: |
      ```kotlin
      // 在 Activity 中创建一个弹簧动画
      val springAnimation = SpringAnimation(view).apply {
          setSpring(SpringForce().apply {
              stiffness = SpringForce.STIFFNESS_MEDIUM // 设置刚度
              dampingRatio = SpringForce.DAMPING_RATIO_HIGH_BOUNCY // 设置阻尼比
          })
          targetPosition = 100f // 设置目标位置
      }
      springAnimation.start() // 启动动画
      ```

  - title: 拖动和弹回
    content: 在用户拖动视图后，视图会弹回到原位置。
    example: |
      ```kotlin
      movingView.setOnTouchListener { view, event ->
          when (event.actionMasked) {
              MotionEvent.ACTION_DOWN -> springAnimation.cancel() // 取消之前的动画
              MotionEvent.ACTION_MOVE -> {
                  view.x = event.rawX // 更新视图位置
                  view.y = event.rawY
              }
              MotionEvent.ACTION_UP -> springAnimation.start() // 启动弹回动画
          }
          true
      }
      ```

  - title: 旋转动画
    content: 旋转视图并在释放时弹回原位置。
    example: |
      ```kotlin
      // 旋转视图的动画实现
      val rotationAnimation = SpringAnimation(rotatingView, SpringAnimation.ROTATION).apply {
          spring.stiffness = SpringForce.STIFFNESS_LOW // 设置刚度
          spring.dampingRatio = SpringForce.DAMPING_RATIO_MEDIUM_BOUNCY // 设置阻尼比
      }

      rotatingView.setOnTouchListener { view, event ->
          when (event.actionMasked) {
              MotionEvent.ACTION_DOWN -> rotationAnimation.cancel() // 取消动画
              MotionEvent.ACTION_MOVE -> {
                  val angle = calculateAngle(event.x, event.y) // 计算旋转角度
                  view.rotation += angle // 更新旋转角度
              }
              MotionEvent.ACTION_UP -> rotationAnimation.start() // 启动旋转回弹动画
          }
          true
      }
      ```

  - title: 缩放动画
    content: 使用手势缩放视图，释放后弹回原大小。
    example: |
      ```kotlin
      val scaleAnimation = SpringAnimation(view, SpringAnimation.SCALE_X).apply {
          spring.stiffness = SpringForce.STIFFNESS_LOW
          spring.dampingRatio = SpringForce.DAMPING_RATIO_MEDIUM_BOUNCY
      }

      view.setOnTouchListener { _, event ->
          if (event.pointerCount == 2) {
              // 处理缩放手势
              val scaleFactor = calculateScaleFactor(event) // 计算缩放因子
              view.scaleX *= scaleFactor
              view.scaleY *= scaleFactor
          } else if (event.action == MotionEvent.ACTION_UP) {
              scaleAnimation.start() // 启动缩放回弹动画
          }
          true
      }
      ```

references:
  - title: "Physics-based Animations in Android"
    url: https://developer.android.com/reference/android/animation/SpringAnimation
  - title: "Creating Custom Animations"
    url: https://developer.android.com/training/animation/custom
  - title: "Animating with Springs"
    url: https://medium.com/androiddevelopers/understanding-spring-animations-7c87a0a3e2d9
