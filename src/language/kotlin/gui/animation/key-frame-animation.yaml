id: key-frame-animation
title: ValueAnimator
query: Android ValueAnimator
comment: 尽量详尽的演示不同属性和场景用法
description: "ValueAnimator 是 Android 中用于属性动画的类，允许在一段时间内改变一个或多个属性的值。它提供了灵活的时间控制和插值器支持，可以用于动画效果、UI 更新等场景。"
usage:
  - title: 创建简单动画
    content: 使用 ValueAnimator 创建基础动画，支持浮点数或整数。
    example: |
      ```kotlin
      // 在 MainActivity 中创建简单的浮点动画
      val animation = ValueAnimator.ofFloat(0f, 1f).apply {
          duration = 1000 // 动画持续时间 1 秒
          addUpdateListener { animator ->
              val animatedValue = animator.animatedValue as Float
              // 使用 animatedValue 更新 UI
              println(animatedValue)
          }
          start() // 启动动画
      }
      ```

  - title: 更新 TextView 值
    content: 动画更新 TextView 的内容，通过整型值变化。
    example: |
      ```kotlin
      // 在 MainActivity 中更新 TextView 显示的数值
      val valueAnimator = ValueAnimator.ofInt(0, 100).apply {
          duration = 3000 // 动画持续时间 3 秒
          addUpdateListener { animator ->
              val animatedValue = animator.animatedValue as Int
              myTextView.text = "$ $animatedValue" // 更新 TextView
          }
          start() // 启动动画
      }
      ```

  - title: 设置插值器
    content: 修改动画的插值器以改变动画效果，如加速或减速。
    example: |
      ```kotlin
      // 在 MainActivity 中使用 DecelerateInterpolator
      val animator = ValueAnimator.ofFloat(10f, 40f).apply {
          duration = 1000 // 动画持续时间 1 秒
          interpolator = DecelerateInterpolator() // 使用减速插值器
          addUpdateListener { animator ->
              myTextView.textSize = animator.animatedValue as Float // 更新 TextView 字体大小
          }
          start() // 启动动画
      }
      ```

  - title: 循环动画
    content: 设置动画循环播放，使用不同的重复模式。
    example: |
      ```kotlin
      // 在 MainActivity 中创建循环动画
      val loopAnimator = ValueAnimator.ofFloat(0f, 1f).apply {
          duration = 1000 // 动画持续时间 1 秒
          repeatCount = ValueAnimator.INFINITE // 无限循环
          addUpdateListener { animator ->
              val value = animator.animatedValue as Float
              myView.alpha = value // 更新视图透明度
          }
          start() // 启动动画
      }
      ```

  - title: 使用 Keyframe 动画
    content: 通过定义关键帧来实现更复杂的动画效果。
    example: |
      ```kotlin
      // 使用 Keyframe 定义复杂动画
      val keyframeAnimator = ValueAnimator.ofFloat(0f, 1f).apply {
          duration = 2000 // 动画持续时间 2 秒
          setValues(
              Keyframe.ofFloat(0f, 0f),
              Keyframe.ofFloat(0.5f, 1f), // 中间状态
              Keyframe.ofFloat(1f, 0f) // 结束状态
          )
          addUpdateListener { animator ->
              val animatedValue = animator.animatedValue as Float
              myView.scaleX = animatedValue // 更新视图缩放
              myView.scaleY = animatedValue // 更新视图缩放
          }
          start() // 启动动画
      }
      ```

references:
  - title: "ValueAnimator Documentation"
    url: https://developer.android.com/reference/android/animation/ValueAnimator
  - title: "ValueAnimator Tutorial with Examples"
    url: https://www.demo2s.com/android/android-valueanimator-tutorial-with-examples.html
  - title: "Using ValueAnimator in Android"
    url: https://riptutorial.com/android/example/1687/valueanimator
