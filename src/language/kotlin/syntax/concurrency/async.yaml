id: async
title: 协程
query: Kotlin 协程 用法
comment: 详细介绍 Kotlin 中协程的使用，涵盖基本概念、scope 的用法、构建器、上下文切换、异常处理等。
description: |
  Kotlin 协程是一种轻量级的并发编程模型，提供了一种简洁的方式来处理异步任务。它的核心概念包括挂起函数（`suspend`）、协程上下文（`CoroutineContext`）、协程作用域（`CoroutineScope`）、启动模式（`launch` 和 `async`）、异常处理机制、取消机制及超时控制。协程广泛用于 Android 应用程序开发和其他需要并发处理的场景。
  
  - **挂起函数（suspend）**：协程可以通过挂起函数暂停执行并释放资源，直到恢复运行。挂起函数只能在其他协程或挂起函数中调用。
  - **协程上下文**：控制协程的执行环境，决定协程在哪个线程或调度器上运行。常见的调度器有 `Dispatchers.Main`、`Dispatchers.IO` 等。
  - **协程作用域（CoroutineScope）**：管理协程的生命周期，防止内存泄漏，常见作用域有 `GlobalScope`、`CoroutineScope` 和 `viewModelScope`。
  - **启动模式**：`launch` 启动协程，不返回结果；`async` 启动协程并返回 `Deferred`，用于并发任务的结果获取。

example:
  - title: 不同协程作用域的用法示例
    content: |
      ```kotlin
      import kotlinx.coroutines.*

      fun main() = runBlocking {
          // GlobalScope 的协程生命周期与整个应用程序一致（主线程不会等待子协程结束）
          GlobalScope.launch {
              delay(1000L)
              println("GlobalScope Coroutine")
          }

          // runBlocking 会阻塞当前线程直到协程执行完毕
          runBlocking {
              println("runBlocking Coroutine")
          }

          // coroutineScope 会挂起但不阻塞当前线程，等待内部协程完成
          coroutineScope {
              launch {
                  delay(500L)
                  println("coroutineScope Coroutine")
              }
          }

          // supervisorScope 允许子协程独立失败
          supervisorScope {
              launch {
                  throw Exception("Error in child coroutine")
              }
              println("supervisorScope continues despite failure")
          }
      }
      ```

  - title: scope 取消协程示例
    content: |
      ```kotlin
      import kotlinx.coroutines.*

      fun main() = runBlocking {
          // 创建一个作用域
          val scope = CoroutineScope(Dispatchers.Default)

          // 启动多个协程
          scope.launch {
              repeat(1000) { i ->
                  println("Job 1 is working on $i")
                  delay(300L)
              }
          }

          scope.launch {
              repeat(1000) { i ->
                  println("Job 2 is working on $i")
                  delay(500L)
              }
          }

          scope.launch {
              repeat(1000) { i ->
                  println("Job 3 is working on $i")
                  delay(700L)
              }
          }

          // 让协程运行一段时间
          delay(1500L)
          println("Main: Cancelling scope")
          
          // 取消整个作用域，所有在该作用域中运行的协程都会停止执行，并不会继续输出内容。
          scope.cancel()
          println("Main: Scope cancelled")

          // 等待一小段时间以确保取消的协程不会再输出
          delay(500L)

          /*
            Job 1 is working on 0
            Job 2 is working on 0
            Job 3 is working on 0
            Job 1 is working on 1
            Job 2 is working on 1
            Job 1 is working on 2
            Job 3 is working on 1
            Main: Cancelling scope
            Main: Scope cancelled
          */
      }
      ```

  - title: 协程构建器 launch 与 async 的区别
    content: |
      ```kotlin
      import kotlinx.coroutines.*

      fun main() = runBlocking {
          // launch 启动一个协程，不返回结果
          val job = launch {
              delay(1000L)
              println("Launch completed")
          }

          // async 启动一个协程并返回结果
          val deferred = async {
              delay(1000L)
              "Async result"
          }
          println("Async result: ${deferred.await()}")
      }
      ```

  - title: launch 懒启动的用法
    content: |
      ```kotlin
      import kotlinx.coroutines.*

      fun main() = runBlocking {
          val job = launch(start = CoroutineStart.LAZY) {
              println("Lazy launch started")
          }
          delay(500L)
          println("Lazy launch will now start")
          job.start() // 手动启动协程

          /*
            Lazy launch will now start
            Lazy launch started
          */
      }
      ```

  - title: launch 返回 Job 的状态
    content: |
      ```kotlin
      import kotlinx.coroutines.*

      fun main() = runBlocking {
          val job = launch {
              delay(1000L)
              println("Coroutine finished")
          }
          println("Job is active: ${job.isActive}")
          job.join() // 等待协程完成
          println("Job is completed: ${job.isCompleted}")
      }
      ```

  - title: async 并发调用返回
    content: |
      ```kotlin
      import kotlinx.coroutines.*

      fun main() = runBlocking {
          val deferred1 = async { getData1() }
          val deferred2 = async { getData2() }
          println("Result: ${deferred1.await() + deferred2.await()}")
      }

      suspend fun getData1(): Int {
          delay(1000L)
          return 10
      }

      suspend fun getData2(): Int {
          delay(1000L)
          return 20
      }
      ```

  - title: awaitAll
    content: |
      ```kotlin
      import kotlinx.coroutines.*

      fun main() = runBlocking {
          // 创建多个 async 并发任务，并存储在一个数组中
          val deferredList = listOf(
              async { getData1() },
              async { getData2() },
              async { getData3() }
          )

          // 使用 awaitAll 等待所有任务完成并获取结果
          val results = deferredList.awaitAll()

          // 处理结果
          println("Results: ${results.sum()}")
      }

      suspend fun getData1(): Int {
          delay(1000L)
          return 10
      }

      suspend fun getData2(): Int {
          delay(1000L)
          return 20
      }

      suspend fun getData3(): Int {
          delay(1000L)
          return 30
      }
      ```

  - title: suspend 挂起函数的使用
    content: |
      ```kotlin
      import kotlinx.coroutines.*

      suspend fun mainTask() {
          delay(1000L) // 模拟耗时操作
          println("Task completed")
      }

      fun main() = runBlocking {
          launch {
              mainTask() // 调用挂起函数
          }
      }
      ```
  - title: suspend 函数的嵌套调用
    content: |
      ```kotlin
      import kotlinx.coroutines.*

      suspend fun mainTask() = coroutineScope {
          // 在 coroutineScope 中启动两个新协程
          launch {
              delay(1000L)
              println("Task 1 completed in new coroutine")
          }

          launch {
              delay(500L)
              println("Task 2 completed in new coroutine")
          }

          println("Main task started")
      }

      fun main() = runBlocking {
          // 调用挂起函数
          mainTask()
          println("Main function completed")
      }
      ```

  - title: 不同 Dispatchers 的用法
    content: |
      ```kotlin
      import kotlinx.coroutines.*

      fun main() = runBlocking {
          // 使用 Default Dispatcher：适合 CPU 密集型任务
          launch(Dispatchers.Default) {
              println("Default dispatcher - Running on: ${Thread.currentThread().name}")
              // 此调度器使用共享的后台线程池，适用于需要大量计算的任务
          }

          // 使用 IO Dispatcher：适合 I/O 密集型任务
          launch(Dispatchers.IO) {
              println("IO dispatcher - Running on: ${Thread.currentThread().name}")
              // 适用于网络、文件、数据库等 I/O 操作，它会根据需要动态扩展线程
          }

          // 使用 Unconfined Dispatcher：无特定线程绑定，任务运行时选择线程
          launch(Dispatchers.Unconfined) {
              println("Unconfined dispatcher - Running on: ${Thread.currentThread().name}")
              // 任务开始在哪个线程运行就继续在哪个线程，适用于简单任务
          }

          // 使用 newSingleThreadContext 创建新的单独线程：明确分配线程
          val singleThreadContext = newSingleThreadContext("MyThread")
          launch(singleThreadContext) {
              println("Running on MyThread - Thread name: ${Thread.currentThread().name}")
              // 适用于需要在特定线程执行任务的场景，但代价较高，建议尽量少用
          }

          // 释放单线程上下文，避免内存泄漏
          singleThreadContext.close()
      }
      ```

  - title: withContext 的用法
    content: |
      ```kotlin
      import kotlinx.coroutines.*

      fun main() = runBlocking {
          // 使用 withContext 切换到 IO 调度器，执行耗时操作
          val result = withContext(Dispatchers.IO) {
              // 适用于你需要在不同的线程中执行一些串行任务。例如从主线程切换到 I/O 线程进行文件读写，然后返回主线程更新 UI。每个任务必须执行完才能继续后续操作。
              println("Executing on: ${Thread.currentThread().name}")
              delay(1000L) // 模拟耗时操作
              "Result from IO" // 返回结果
          }

          // 等待结果返回后继续执行
          println("Back on main thread: ${Thread.currentThread().name}")
          println(result) // 输出结果
      }
      ```
  - title: 协程传播取消机制
    content: |
      ```kotlin
      import kotlinx.coroutines.*

      fun main() = runBlocking {
          // 启动一个父协程
          val parentJob = launch {
              println("Parent coroutine started")

              // 启动第一个子协程
              val childJob1 = launch {
                  println("Child coroutine 1 started")

                  // 启动子协程的子协程
                  launch {
                      try {
                          println("Grandchild coroutine started")
                          delay(2000L) // 模拟耗时任务
                          println("Grandchild coroutine completed")
                      } catch (e: CancellationException) {
                          println("Grandchild coroutine was cancelled")
                      }
                  }

                  try {
                      delay(3000L) // 模拟耗时任务
                      println("Child coroutine 1 completed")
                  } catch (e: CancellationException) {
                      println("Child coroutine 1 was cancelled")
                  }
              }

              // 启动第二个子协程
              val childJob2 = launch {
                  try {
                      println("Child coroutine 2 started")
                      delay(5000L) // 模拟耗时任务
                      println("Child coroutine 2 completed")
                  } catch (e: CancellationException) {
                      println("Child coroutine 2 was cancelled")
                  }
              }
          }

          delay(1000L) // 等待1秒后取消所有协程
          println("Cancelling parent job")
          parentJob.cancelAndJoin() // 取消父协程，等待其完成
          println("Parent job is cancelled")
      }
      ```

  - title: 协程的超时机制
    content: |
      ```kotlin
      import kotlinx.coroutines.*

      fun main() = runBlocking {
          try {
              withTimeout(1000L) {
                  delay(2000L) // 模拟超时任务
              }
          } catch (e: TimeoutCancellationException) {
              println("Task timed out")
          }
      }
      ```

  - title: 协程的异常处理
    content: |
      ```kotlin
      import kotlinx.coroutines.*

      fun main() = runBlocking {
          val job = launch {
              try {
                  riskyTask()
              } catch (e: Exception) {
                  println("Caught exception: ${e.message}")
              }
          }
          job.join()
      }

      suspend fun riskyTask() {
          delay(500L)
          throw Exception("Something went wrong!")
      }
      ```
  - title: 使用 Channel 在不同协程之间进行通信
    content: |
      ```kotlin
      import kotlinx.coroutines.*
      import kotlinx.coroutines.channels.Channel

      fun main() = runBlocking {
          // 创建一个 Channel
          val channel = Channel<Int>()

          // 启动一个协程来发送数据
          launch {
              for (x in 1..5) {
                  println("Sending: $x")
                  channel.send(x) // 发送数据到 Channel
                  delay(500L) // 模拟发送间隔
              }
              channel.close() // 关闭 Channel，表示没有更多数据
          }

          // 启动另一个协程来接收数据
          launch {
              for (y in channel) {
                  println("Received: $y") // 接收并处理数据
              }
              println("Channel closed, no more data")
          }
      }
      ```

  - title: 使用 Flow 处理数据流
    content: |
      ```kotlin
      import kotlinx.coroutines.*
      import kotlinx.coroutines.flow.*

      fun main() = runBlocking {
          // 定义一个 Flow，生成一系列数据
          val numberFlow: Flow<Int> = flow {
              for (i in 1..5) {
                  delay(500L) // 模拟异步操作
                  println("Emitting: $i")
                  emit(i) // 发射数据
              }
          }

          // 收集 Flow 数据
          numberFlow.collect { value ->
              println("Collected: $value") // 收集并处理数据
          }

          println("Flow collection completed")
      }
      ```

references:
  - title: Coroutines guide
    url: https://kotlinlang.org/docs/coroutines-guide.html
  - title: 一文快速入门 Kotlin 协程
    url: https://juejin.cn/post/6908271959381901325
  - title: Kotlin 协程详解
    url: https://juejin.cn/post/6987724340775108622
